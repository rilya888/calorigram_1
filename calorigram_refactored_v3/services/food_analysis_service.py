"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã —á–µ—Ä–µ–∑ AI
"""
import logging
import re
from typing import Optional, Tuple
from api_client import APIClient, api_client
from constants import MAX_IMAGE_SIZE
from logging_config import get_logger

logger = get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_TEXT_LENGTH = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è


# ==================== UTILITY FUNCTIONS ====================

def extract_weight_from_description(description: str) -> Optional[float]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Å–∞
        patterns = [
            r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º|gram)',
            r'(\d+(?:[.,]\d+)?)\s*(?:–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º|kg)',
            r'(\d+(?:[.,]\d+)?)\s*(?:–º–ª|ml)',
            r'(\d+(?:[.,]\d+)?)\s*(?:–ª|–ª–∏—Ç—Ä|liter)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, description.lower())
            if match:
                weight = float(match.group(1).replace(',', '.'))
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–≥ –∏ –ª –≤ –≥/–º–ª
                if '–∫–≥' in pattern or 'kg' in pattern or '–ª–∏—Ç—Ä' in pattern or 'liter' in pattern:
                    weight *= 1000
                return weight
        
        return None
    except Exception as e:
        logger.error(f"Error extracting weight: {e}")
        return None


def extract_calories_per_100g_from_analysis(analysis_text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ò—â–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥
        patterns = [
            r'–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:\s*(\d+)\s*–∫–∫–∞–ª',
            r'–Ω–∞ 100–≥:\s*(\d+)\s*–∫–∫–∞–ª',
            r'100–≥.*?(\d+)\s*–∫–∫–∞–ª'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
            if match:
                calories = int(match.group(1))
                if 0 < calories < 10000:  # –†–∞–∑—É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    logger.info(f"Extracted calories per 100g: {calories} from pattern: {pattern}")
                    return calories
        
        return None
    except Exception as e:
        logger.error(f"Error extracting calories per 100g: {e}")
        return None


def extract_calories_from_analysis(analysis_text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        logger.info(f"Extracting calories from analysis text: {analysis_text[:100]}...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        priority_patterns = [
            # –¢–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —è–∫–æ—Ä—è–º–∏
            r'–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:\s*(\d+)\s*–∫–∫–∞–ª\s*$',
            r'–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:\s*(\d+)\s*–∫–∫–∞–ª',
            r'–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:\s*(\d+)\s*–∫–∫–∞–ª',
            r'–í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π:\s*(\d+)\s*–∫–∫–∞–ª',
        ]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in priority_patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE | re.MULTILINE)
            if match:
                calories = int(match.group(1))
                if 0 < calories < 10000:
                    logger.info(f"Extracted calories: {calories} from pattern: {pattern}")
                    return calories
        
        # –ó–∞–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        fallback_patterns = [
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.*?(\d+)\s*–∫–∫–∞–ª',
            r'(\d+)\s*–∫–∫–∞–ª',
        ]
        
        for pattern in fallback_patterns:
            matches = re.findall(pattern, analysis_text, re.IGNORECASE)
            if matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å)
                calories = int(matches[-1] if isinstance(matches[-1], str) else matches[-1][0])
                if 0 < calories < 10000:
                    logger.info(f"Extracted calories (fallback): {calories} from pattern: {pattern}")
                    return calories
        
        logger.warning("Could not extract calories from analysis")
        return None
        
    except Exception as e:
        logger.error(f"Error extracting calories: {e}")
        return None


def extract_macros_from_analysis(analysis_text: str) -> Tuple[int, float, float, float]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ë–ñ–£ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò"""
    try:
        logger.info(f"Extracting macros from analysis text: {analysis_text[:100]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
        calories = extract_calories_from_analysis(analysis_text) or 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ"
        protein_patterns = [
            r'üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –ë–µ–ª–∫–∏:\s*([\d,]+)–≥',
            r'–û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –ë–µ–ª–∫–∏:\s*([\d,]+)–≥',
            r'‚Ä¢ –ë–µ–ª–∫–∏:\s*([\d,]+)–≥',
            r'–ë–µ–ª–∫–∏:\s*([\d,]+)–≥',
            r'–ë–µ–ª–∫–∏:\s*([\d,]+)\s*–≥',
        ]
        
        fat_patterns = [
            r'üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –ñ–∏—Ä—ã:\s*([\d,]+)–≥',
            r'–û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –ñ–∏—Ä—ã:\s*([\d,]+)–≥',
            r'‚Ä¢ –ñ–∏—Ä—ã:\s*([\d,]+)–≥',
            r'–ñ–∏—Ä—ã:\s*([\d,]+)–≥',
            r'–ñ–∏—Ä—ã:\s*([\d,]+)\s*–≥',
        ]
        
        carbs_patterns = [
            r'üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã:\s*([\d,]+)–≥',
            r'–û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:.*?‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã:\s*([\d,]+)–≥',
            r'‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã:\s*([\d,]+)–≥',
            r'–£–≥–ª–µ–≤–æ–¥—ã:\s*([\d,]+)–≥',
            r'–£–≥–ª–µ–≤–æ–¥—ã:\s*([\d,]+)\s*–≥',
        ]
        
        protein = 0.0
        fat = 0.0
        carbs = 0.0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–ª–∫–∏
        for pattern in protein_patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE)
            if match:
                protein = float(match.group(1).replace(',', '.'))
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∏—Ä—ã
        for pattern in fat_patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE)
            if match:
                fat = float(match.group(1).replace(',', '.'))
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥–ª–µ–≤–æ–¥—ã
        for pattern in carbs_patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE)
            if match:
                carbs = float(match.group(1).replace(',', '.'))
                break
        
        logger.info(f"Extracted macros: {calories} kcal, {protein}g protein, {fat}g fat, {carbs}g carbs")
        return calories, protein, fat, carbs
        
    except Exception as e:
        logger.error(f"Error extracting macros from analysis: {e}")
        return 0, 0.0, 0.0, 0.0


def extract_dish_name_from_analysis(analysis_text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        pattern = r'–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.+?)(?:\n|$)'
        match = re.search(pattern, analysis_text)
        if match:
            return match.group(1).strip()
        return None
    except Exception as e:
        logger.error(f"Error extracting dish name: {e}")
        return None


def parse_quantity_from_description(description: str) -> Tuple[float, str]:
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞
    
    Returns:
        Tuple[float, str]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
    """
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        patterns = {
            '–≥': r'(\d+(?:[.,]\d+)?)\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º|gram)',
            '–∫–≥': r'(\d+(?:[.,]\d+)?)\s*(?:–∫–≥|–∫–∏–ª–æ–≥—Ä–∞–º–º|kg)',
            '–º–ª': r'(\d+(?:[.,]\d+)?)\s*(?:–º–ª|ml)',
            '–ª': r'(\d+(?:[.,]\d+)?)\s*(?:–ª|–ª–∏—Ç—Ä|liter)',
            '—à—Ç': r'(\d+(?:[.,]\d+)?)\s*(?:—à—Ç|—à—Ç—É–∫|—à—Ç—É–∫–∏|piece|pieces)',
            '–ø–æ—Ä—Ü': r'(\d+(?:[.,]\d+)?)\s*(?:–ø–æ—Ä—Ü|–ø–æ—Ä—Ü–∏—è|–ø–æ—Ä—Ü–∏–π|serving|servings)',
            '—Å—Ç': r'(\d+(?:[.,]\d+)?)\s*(?:—Å—Ç|—Å—Ç–∞–∫–∞–Ω|—Å—Ç–∞–∫–∞–Ω–æ–≤|glass|glasses)',
            '—á_–ª': r'(\d+(?:[.,]\d+)?)\s*(?:—á\.–ª|—á–∞–π–Ω\.–ª|—á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞|teaspoon)',
            '—Å—Ç_–ª': r'(\d+(?:[.,]\d+)?)\s*(?:—Å—Ç\.–ª|—Å—Ç–æ–ª–æ–≤\.–ª|—Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞|tablespoon)',
        }
        
        for unit, pattern in patterns.items():
            match = re.search(pattern, description.lower())
            if match:
                quantity = float(match.group(1).replace(',', '.'))
                return quantity, unit
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 1.0, '–ø–æ—Ä—Ü'
        
    except Exception as e:
        logger.error(f"Error parsing quantity: {e}")
        return 1.0, '–ø–æ—Ä—Ü'


def is_valid_analysis(analysis_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    return bool(analysis_text and len(analysis_text) > 20 and ('–∫–∞–ª–æ—Ä–∏' in analysis_text.lower() or '–∫–∫–∞–ª' in analysis_text.lower()))


def clean_markdown_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ markdown —Å–∏–º–≤–æ–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
    cleaned = text.replace('**', '').replace('__', '').replace('*', '').replace('_', '')
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫, –Ω–µ —Ç—Ä–æ–≥–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã
    lines = cleaned.split('\n')
    cleaned_lines = [re.sub(r'  +', ' ', line).strip() for line in lines]
    
    return '\n'.join(cleaned_lines)


def remove_explanations_from_analysis(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
    lines = text.split('\n')
    filtered_lines = []
    
    skip_patterns = [
        r'–ø—Ä–∏–º–µ—á–∞–Ω–∏',
        r'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü',
        r'—Å–æ–≤–µ—Ç',
        r'–æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ',
        r'–≤–∞–∂–Ω–æ',
    ]
    
    for line in lines:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
        if any(re.search(pattern, line.lower()) for pattern in skip_patterns):
            continue
        filtered_lines.append(line)
    
    return '\n'.join(filtered_lines)


# ==================== AI ANALYSIS FUNCTIONS ====================

async def analyze_food_photo(image_data: bytes):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã —á–µ—Ä–µ–∑ AI"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not image_data:
            logger.error("Empty image data provided")
            return None
            
        if len(image_data) > MAX_IMAGE_SIZE:
            logger.error(f"Image too large: {len(image_data)} bytes (max: {MAX_IMAGE_SIZE})")
            return None
        
        logger.info("Starting food photo analysis...")
        
        async with api_client:
            result = await api_client.analyze_image(image_data)
        
        logger.info(f"Photo analysis successful, result length: {len(result) if result else 0}")
        return result
        
    except Exception as e:
        logger.error(f"Error analyzing food photo: {e}")
        return None


async def analyze_food_text(description: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã —á–µ—Ä–µ–∑ AI"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not description or not isinstance(description, str):
            logger.error(f"Invalid description provided: type={type(description)}, value='{description}'")
            return None
        
        description = description.strip()
        
        if len(description) < 5:
            logger.error(f"Description too short: length={len(description)}, content='{description}'")
            return None
            
        if len(description) > MAX_TEXT_LENGTH:
            logger.error(f"Description too long: {len(description)} chars (max: {MAX_TEXT_LENGTH})")
            return None
        
        logger.info(f"Starting text analysis for description: {description[:50]}...")
        
        async with api_client:
            result = await api_client.analyze_text(description)
        
        logger.info(f"Text analysis successful, result length: {len(result) if result else 0}")
        return result
        
    except Exception as e:
        logger.error(f"Error analyzing food text: {e}")
        return None


async def analyze_food_supplement(combined_prompt: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not combined_prompt or not isinstance(combined_prompt, str):
            logger.error(f"Invalid combined prompt provided: type={type(combined_prompt)}, value='{combined_prompt}'")
            return None
        
        # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if len(combined_prompt.strip()) < 3:
            logger.error(f"Combined prompt too short: length={len(combined_prompt.strip())}, content='{combined_prompt.strip()}'")
            return None
            
        logger.info("Starting food supplement analysis...")
        
        async with api_client:
            result = await api_client.analyze_text(combined_prompt)
        
        logger.info(f"Supplement analysis successful, result length: {len(result) if result else 0}")
        return result
        
    except Exception as e:
        logger.error(f"Error analyzing food supplement: {e}")
        return None


async def transcribe_voice(audio_data: bytes):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        if not audio_data:
            logger.error("Empty audio data provided")
            return None
        
        logger.info("Starting voice transcription...")
        
        async with api_client:
            result = await api_client.analyze_voice(audio_data, None, None)
        
        logger.info(f"Voice transcription result: {result[:100] if result else None}...")
        return result
        
    except Exception as e:
        logger.error(f"Error transcribing voice: {e}")
        return None

