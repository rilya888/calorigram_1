"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –≤ Telegram
–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π
"""
from typing import Tuple
from logging_config import get_logger

logger = get_logger(__name__)


def get_progress_emoji(progress: float) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0.0 –¥–æ 1.0
    
    Returns:
        –≠–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    """
    if progress >= 1.0:
        return "üü¢"  # –ó–µ–ª–µ–Ω—ã–π - —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
    elif progress >= 0.8:
        return "üü°"  # –ñ–µ–ª—Ç—ã–π - –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
    elif progress >= 0.5:
        return "üü†"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    else:
        return "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π - –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–ª–∏


def create_progress_bar(current: float, target: float, width: int = 10) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ —ç–º–æ–¥–∑–∏
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        target: –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        width: –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    try:
        if target == 0:
            return "‚ñë" * width
        
        progress = min(current / target, 1.0)
        filled = int(progress * width)
        
        bar = "‚ñà" * filled + "‚ñë" * (width - filled)
        percentage = int(progress * 100)
        
        return f"{bar} {percentage}%"
        
    except Exception as e:
        logger.error(f"Error creating progress bar: {e}")
        return "‚ñë" * width + " 0%"


def create_macro_progress_bar(current: float, target: float, name: str, unit: str = "–≥") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        target: –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
        unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    try:
        if target == 0:
            return f"‚Ä¢ {name}: {current}{unit} / {target}{unit} (–Ω–µ –∑–∞–¥–∞–Ω–æ)"
        
        progress = min(current / target, 1.0)
        filled = int(progress * 10)
        
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        percentage = int(progress * 100)
        emoji = get_progress_emoji(progress)
        
        return f"{emoji} {name}: {current}{unit} / {target}{unit} {bar} {percentage}%"
        
    except Exception as e:
        logger.error(f"Error creating macro progress bar: {e}")
        return f"‚Ä¢ {name}: {current}{unit} / {target}{unit} (–æ—à–∏–±–∫–∞)"


def create_calorie_progress_bar(current: int, target: int) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∫–∞–ª–æ—Ä–∏–π
    
    Args:
        current: –¢–µ–∫—É—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏
        target: –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∫–∞–ª–æ—Ä–∏–π
    """
    try:
        if target == 0:
            return f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {current} / {target} (–Ω–µ –∑–∞–¥–∞–Ω–æ)"
        
        progress = min(current / target, 1.0)
        filled = int(progress * 10)
        
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        percentage = int(progress * 100)
        emoji = get_progress_emoji(progress)
        
        remaining = target - current
        remaining_text = f"–û—Å—Ç–∞—Ç–æ–∫: {remaining} –∫–∫–∞–ª" if remaining > 0 else f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {abs(remaining)} –∫–∫–∞–ª"
        
        return f"{emoji} –ö–∞–ª–æ—Ä–∏–∏: {current} / {target} {bar} {percentage}%\n   {remaining_text}"
        
    except Exception as e:
        logger.error(f"Error creating calorie progress bar: {e}")
        return f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {current} / {target} (–æ—à–∏–±–∫–∞)"


def create_meal_breakdown(meals_data: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    
    Args:
        meals_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø—Ä–∏–µ–º–∞–º
    """
    try:
        if not meals_data:
            return "üçΩÔ∏è **–ü–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:**\n   –ó–∞–ø–∏—Å–µ–π –æ –µ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç"
        
        result = "üçΩÔ∏è **–ü–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:**\n"
        
        meal_emojis = {
            'meal_breakfast': 'üåÖ',
            'meal_lunch': 'üåû',
            'meal_dinner': 'üåô',
            'meal_snack': 'üçé'
        }
        
        meal_names = {
            'meal_breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
            'meal_lunch': '–û–±–µ–¥',
            'meal_dinner': '–£–∂–∏–Ω',
            'meal_snack': '–ü–µ—Ä–µ–∫—É—Å—ã'
        }
        
        for meal in meals_data:
            meal_type = meal.get('meal_type', 'meal_snack')
            meal_name = meal.get('meal_name', '–ë–ª—é–¥–æ')
            calories = meal.get('calories', 0)
            protein = meal.get('protein', 0)
            fat = meal.get('fat', 0)
            carbs = meal.get('carbs', 0)
            time = meal.get('time', '')
            
            emoji = meal_emojis.get(meal_type, 'üçΩÔ∏è')
            name = meal_names.get(meal_type, '–ü—Ä–∏–µ–º –ø–∏—â–∏')
            
            result += f"{emoji} **{name}**"
            if time:
                result += f" ({time})"
            result += f":\n"
            result += f"   ‚Ä¢ {meal_name} - {calories} –∫–∫–∞–ª\n"
            result += f"   ‚Ä¢ –ë–ñ–£: {protein:.1f}–≥/{fat:.1f}–≥/{carbs:.1f}–≥\n\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error creating meal breakdown: {e}")
        return "üçΩÔ∏è **–ü–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:**\n   –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
