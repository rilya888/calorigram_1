# Auto-generated module for admin handlers extracted from bot_functions.py
import bot_functions as bf  # for cross-module handler calls

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db_connection, get_user_count, get_meals_count, get_daily_stats, get_all_users_for_admin, get_all_users_for_broadcast, get_user_by_telegram_id, activate_premium_subscription
from constants import ADMIN_CALLBACKS, GOALS
from config import ADMIN_IDS
from logging_config import get_logger
from datetime import datetime, timedelta

logger = get_logger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ _shared
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

def check_subscription_access(telegram_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    from handlers.subscription import check_subscription_access as check_access
    return check_access(telegram_id)

def get_subscription_message(access_info: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    from handlers.subscription import get_subscription_message as get_msg
    return get_msg(access_info)

def get_main_menu_keyboard(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    from handlers.menu import get_main_menu_keyboard as get_keyboard
    return get_keyboard(user_id)

def check_user_registration(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    from handlers.registration import check_user_registration as check_reg
    return check_reg(user_id)

def calculate_daily_calories(age, height, weight, gender: str, activity_level: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π"""
    from handlers.registration import calculate_daily_calories as calc_cal
    return calc_cal(age, height, weight, gender, activity_level)

def get_daily_meals_by_type(user_id: int, date: str = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å"""
    from database import get_daily_meals_by_type as get_meals
    return get_meals(user_id, date)

def get_weekly_meals_by_type(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    from database import get_weekly_meals_by_type as get_week
    return get_week(user_id)

def send_broadcast_message(bot, message_text: str, admin_id: int) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from handlers._shared import send_broadcast_message as send_broadcast
    return send_broadcast(bot, message_text, admin_id)

def get_bot_star_balance():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞"""
    from handlers._shared import get_bot_star_balance as get_balance
    return get_balance()

__all__ = []

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not is_admin(user.id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await bf.show_admin_panel(update, context)

__all__.append('admin_command')

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_count = get_user_count()
        meals_count = get_meals_count()
        daily_stats = get_daily_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞
        try:
            balance_stars = await get_bot_star_balance()
            if balance_stars is not None:
                balance_text = f"\nüí∞ **–ë–∞–ª–∞–Ω—Å Stars:** {balance_stars} ‚≠ê"
            else:
                balance_text = "\nüí∞ **–ë–∞–ª–∞–Ω—Å Stars:** –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"
        except Exception as e:
            logger.warning(f"Could not get star balance in admin panel: {e}")
            balance_text = "\nüí∞ **–ë–∞–ª–∞–Ω—Å Stars:** –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        test_mode_text = ""
        
        admin_text = f"""
üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ: {meals_count}

üìà **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_stats['active_users']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ –µ–¥–µ: {daily_stats['meals_today']}
‚Ä¢ –û–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π: {daily_stats['total_calories']}{balance_text}{test_mode_text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=ADMIN_CALLBACKS['admin_stats'])],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=ADMIN_CALLBACKS['admin_users'])],
            [InlineKeyboardButton("üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏", callback_data=ADMIN_CALLBACKS['admin_meals'])],
            [InlineKeyboardButton("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data=ADMIN_CALLBACKS['admin_subscriptions'])],
            [InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å Stars", callback_data="admin_star_balance")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=ADMIN_CALLBACKS['admin_broadcast'])],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=ADMIN_CALLBACKS['admin_back'])]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error showing admin panel: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

__all__.append('show_admin_panel')

async def handle_admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_count = get_user_count()
        meals_count = get_meals_count()
        daily_stats = get_daily_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_stats = {}
        for i in range(7):
            date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
            week_stats[date] = 0  # –ó–∞–≥–ª—É—à–∫–∞
        
        stats_text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {user_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {daily_stats['active_users']}

üçΩÔ∏è **–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {meals_count}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_stats['meals_today']}
‚Ä¢ –û–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_stats['total_calories']}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 0 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫: 0 –∑–∞–ø–∏—Å–µ–π  
‚Ä¢ –°—Ä–µ–¥–∞: 0 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ß–µ—Ç–≤–µ—Ä–≥: 0 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞: 0 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –°—É–±–±–æ—Ç–∞: 0 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: {daily_stats['meals_today']} –∑–∞–ø–∏—Å–µ–π
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error showing admin stats: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
            ])
        )

__all__.append('handle_admin_stats_callback')

async def handle_admin_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users_for_admin()
        
        if not users:
            await query.message.reply_text(
                "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10)
        users_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
        for i, user_data in enumerate(users[:10], 1):
            users_text += f"{i}. **{user_data[1]}** (ID: {user_data[0]})\n"
            users_text += f"   –ü–æ–ª: {user_data[2]}, –í–æ–∑—Ä–∞—Å—Ç: {user_data[3]}\n"
            users_text += f"   –†–æ—Å—Ç: {user_data[4]}—Å–º, –í–µ—Å: {user_data[5]}–∫–≥\n"
            users_text += f"   –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data[7]} –∫–∫–∞–ª\n"
            users_text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data[8][:10]}\n\n"
        
        if len(users) > 10:
            users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(users_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error showing admin users: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
            ])
        )

__all__.append('handle_admin_users_callback')

async def handle_admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—ã–ª–∫–∞' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users_for_broadcast()
    user_count = len(users)
    
    await query.edit_message_text(
        f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞**\n\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {user_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_admin_broadcast_callback')

async def handle_broadcast_create_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['waiting_for_broadcast_text'] = True
    
    await query.edit_message_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        "‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n"
        "‚Ä¢ *–∫—É—Ä—Å–∏–≤*\n"
        "‚Ä¢ `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π`\n"
        "‚Ä¢ [—Å—Å—ã–ª–∫–∞](https://example.com)\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–£ –Ω–∞—Å **–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** –≤ –±–æ—Ç–µ:\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_broadcast_create_callback')

async def handle_broadcast_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users_for_broadcast()
    user_count = len(users)
    
    await query.edit_message_text(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {user_count}\n"
        f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞:** –ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å\n"
        f"üìà **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:** -%\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫*",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ", callback_data=ADMIN_CALLBACKS['admin_broadcast'])],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_broadcast_stats_callback')

async def handle_broadcast_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = context.user_data.get('broadcast_text', '')
    if not broadcast_text:
        await query.edit_message_text(
            "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ", callback_data=ADMIN_CALLBACKS['admin_broadcast'])]
            ])
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('waiting_for_broadcast_text', None)
    context.user_data.pop('broadcast_text', None)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    bot = context.bot
    stats = await send_broadcast_message(bot, broadcast_text, user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent_count']}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {stats['failed_count']}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked_count']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {(stats['sent_count']/stats['total_users']*100):.1f}%",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_broadcast_confirm_callback')

async def handle_broadcast_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('waiting_for_broadcast_text', None)
    context.user_data.pop('broadcast_text', None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    await bf.handle_admin_broadcast_callback(update, context)

__all__.append('handle_broadcast_cancel_callback')

async def handle_broadcast_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['broadcast_text'] = message_text
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users_for_broadcast()
    user_count = len(users)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    await update.message.reply_text(
        f"üìù **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üìÑ **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
        f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç Calorigram**\n\n{message_text}\n\n"
        f"**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_broadcast_text_input')

async def handle_admin_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

__all__.append('handle_admin_back_callback')

async def handle_admin_subscriptions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    subscriptions_text = """
‚≠ê **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=ADMIN_CALLBACKS['admin_check_subscription'])],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        subscriptions_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('handle_admin_subscriptions_callback')

async def handle_admin_check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Telegram ID
    context.user_data['admin_waiting_for_telegram_id'] = True
    logger.info(f"Set admin_waiting_for_telegram_id=True for user {user.id}")
    
    await query.message.reply_text(
        "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:",
        parse_mode='Markdown'
    )

__all__.append('handle_admin_check_subscription_callback')

async def handle_admin_activate_trial_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ callback data
    if ':' in query.data:
        telegram_id = int(query.data.split(':')[1])
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    success = activate_premium_subscription(telegram_id, 1)  # 1 –¥–µ–Ω—å —Ç—Ä–∏–∞–ª–∞
    
    if success:
        await query.message.reply_text(
            f"‚úÖ **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
            f"üÜì –ü–µ—Ä–∏–æ–¥: 1 –¥–µ–Ω—å\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: –∑–∞–≤—Ç—Ä–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
            ]),
            parse_mode='Markdown'
        )
    else:
        await query.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode='Markdown'
        )

__all__.append('handle_admin_activate_trial_callback')

async def handle_admin_activate_premium_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ callback data
    if ':' in query.data:
        telegram_id = int(query.data.split(':')[1])
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
    success = activate_premium_subscription(telegram_id, 30)  # 30 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º
    
    if success:
        await query.message.reply_text(
            f"‚úÖ **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
            f"‚≠ê –ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
            ]),
            parse_mode='Markdown'
        )
    else:
        await query.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏!**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode='Markdown'
        )

__all__.append('handle_admin_activate_premium_callback')

async def handle_admin_deactivate_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ callback data
    if ':' in query.data:
        telegram_id = int(query.data.split(':')[1])
    else:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE users 
                SET subscription_type = 'trial_expired',
                    is_premium = 0,
                    subscription_expires_at = datetime('now', '-1 day')
                WHERE telegram_id = ?
            ''', (telegram_id,))
            conn.commit()
            
            if cursor.rowcount > 0:
                await query.message.reply_text(
                    f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å: –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await query.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏!**\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode='Markdown'
                )
    except Exception as e:
        logger.error(f"Error deactivating subscription: {e}")
        await query.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏!**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode='Markdown'
        )

__all__.append('handle_admin_deactivate_subscription_callback')

async def handle_admin_telegram_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    text = update.message.text.strip()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        telegram_id = int(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        if telegram_id <= 0:
            await update.message.reply_text("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = get_user_by_telegram_id(telegram_id)
        if not user_data:
            await update.message.reply_text(
                f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!**\n\n"
                f"üÜî Telegram ID: {telegram_id}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.",
                parse_mode='Markdown'
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data['admin_waiting_for_telegram_id'] = False
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['admin_waiting_for_telegram_id'] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
        await bf.show_admin_manage_subscription_menu(update, context, telegram_id, user_data)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)",
            parse_mode='Markdown'
        )

__all__.append('handle_admin_telegram_id_input')

async def handle_statistics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    access_info = check_subscription_access(user.id)
    if not access_info['has_access']:
        subscription_msg = get_subscription_message(access_info)
        await query.edit_message_text(
            subscription_msg,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = check_user_registration(user.id)
        if not user_data:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today")],
            [InlineKeyboardButton("üìÖ –ó–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday")],
            [InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing statistics menu: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

__all__.append('handle_statistics_callback')

async def handle_stats_today_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞ —Å–µ–≥–æ–¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        daily_meals = get_daily_meals_by_type(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        meal_order = [
            ('meal_breakfast', 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫'),
            ('meal_lunch', '‚òÄÔ∏è –û–±–µ–¥'),
            ('meal_dinner', 'üåô –£–∂–∏–Ω'),
            ('meal_snack', 'üçé –ü–µ—Ä–µ–∫—É—Å')
        ]
        
        total_calories = 0
        
        for meal_type, meal_name in meal_order:
            if meal_type in daily_meals:
                calories = daily_meals[meal_type]['calories']
                total_calories += calories
                stats_text += f"{meal_name} - {calories} –∫–∞–ª–æ—Ä–∏–π\n"
            else:
                stats_text += f"{meal_name} - 0 –∫–∞–ª–æ—Ä–∏–π\n"
        
        stats_text += f"\nüî• **–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å:** {total_calories} –∫–∞–ª–æ—Ä–∏–π"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∏ –æ—Ç —Ü–µ–ª–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã
            user_data = get_user_by_telegram_id(user.id)
            if user_data:
                daily_norm = calculate_daily_calories(
                    user_data['age'], 
                    user_data['height'], 
                    user_data['weight'], 
                    user_data['gender'], 
                    user_data['activity_level']
                )
                percentage = round((total_calories / daily_norm) * 100, 1)
                stats_text += f"\nüìä **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã:** {percentage}%"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                goal = user_data[9] if len(user_data) > 9 else 'maintain'
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
                try:
                    if len(user_data) > 10 and user_data[10] and str(user_data[10]).isdigit():
                        target_calories = int(user_data[10])
                    else:
                        target_calories = daily_norm
                except (ValueError, TypeError):
                    target_calories = daily_norm
                
                if target_calories > 0:
                    goal_percentage = round((total_calories / target_calories) * 100, 1)
                    goal_text = GOALS.get(goal, '–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ')
                    goal_emoji = "üìâ" if goal == 'lose_weight' else "‚öñÔ∏è" if goal == 'maintain' else "üìà"
                    stats_text += f"\nüéØ **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏ ({goal_emoji} {goal_text}):** {goal_percentage}%"
        except Exception as e:
            logger.error(f"Error calculating daily percentage: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing today's statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
            ])
        )

__all__.append('handle_stats_today_callback')

async def handle_stats_yesterday_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞ –≤—á–µ—Ä–∞'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—á–µ—Ä–∞
        from datetime import datetime, timedelta
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –∑–∞ –≤—á–µ—Ä–∞
        daily_meals = get_daily_meals_by_type(user.id, yesterday)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞:**\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        meal_order = [
            ('meal_breakfast', 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫'),
            ('meal_lunch', '‚òÄÔ∏è –û–±–µ–¥'),
            ('meal_dinner', 'üåô –£–∂–∏–Ω'),
            ('meal_snack', 'üçé –ü–µ—Ä–µ–∫—É—Å')
        ]
        
        total_calories = 0
        
        for meal_type, meal_name in meal_order:
            if meal_type in daily_meals:
                calories = daily_meals[meal_type]['calories']
                total_calories += calories
                stats_text += f"{meal_name} - {calories} –∫–∞–ª–æ—Ä–∏–π\n"
            else:
                stats_text += f"{meal_name} - 0 –∫–∞–ª–æ—Ä–∏–π\n"
        
        stats_text += f"\nüî• **–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å:** {total_calories} –∫–∞–ª–æ—Ä–∏–π"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∏ –æ—Ç —Ü–µ–ª–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã
            user_data = get_user_by_telegram_id(user.id)
            if user_data:
                daily_norm = calculate_daily_calories(
                    user_data['age'], 
                    user_data['height'], 
                    user_data['weight'], 
                    user_data['gender'], 
                    user_data['activity_level']
                )
                percentage = round((total_calories / daily_norm) * 100, 1)
                stats_text += f"\nüìä **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã:** {percentage}%"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                goal = user_data[9] if len(user_data) > 9 else 'maintain'
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
                try:
                    if len(user_data) > 10 and user_data[10] and str(user_data[10]).isdigit():
                        target_calories = int(user_data[10])
                    else:
                        target_calories = daily_norm
                except (ValueError, TypeError):
                    target_calories = daily_norm
                
                if target_calories > 0:
                    goal_percentage = round((total_calories / target_calories) * 100, 1)
                    goal_text = GOALS.get(goal, '–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ')
                    goal_emoji = "üìâ" if goal == 'lose_weight' else "‚öñÔ∏è" if goal == 'maintain' else "üìà"
                    stats_text += f"\nüéØ **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏ ({goal_emoji} {goal_text}):** {goal_percentage}%"
        except Exception as e:
            logger.error(f"Error calculating daily percentage: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing yesterday's statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
            ])
        )

__all__.append('handle_stats_yesterday_callback')

async def handle_stats_week_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞ –Ω–µ–¥–µ–ª—é'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        week_stats = get_weekly_meals_by_type(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days_order = [
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', 
            '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        ]
        
        total_week_calories = 0
        
        for day in days_order:
            if day in week_stats:
                calories = week_stats[day]
                total_week_calories += calories
                stats_text += f"{day} - {calories} –∫–∞–ª–æ—Ä–∏–π\n"
            else:
                stats_text += f"{day} - 0 –∫–∞–ª–æ—Ä–∏–π\n"
        
        stats_text += f"\nüî• **–í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:** {total_week_calories} –∫–∞–ª–æ—Ä–∏–π"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∏ –æ—Ç —Ü–µ–ª–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã
            user_data = get_user_by_telegram_id(user.id)
            if user_data:
                daily_norm = calculate_daily_calories(
                    user_data['age'], 
                    user_data['height'], 
                    user_data['weight'], 
                    user_data['gender'], 
                    user_data['activity_level']
                )
                weekly_norm = daily_norm * 7
                percentage = round((total_week_calories / weekly_norm) * 100, 1)
                stats_text += f"\nüìä **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º—ã:** {percentage}%"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                goal = user_data[9] if len(user_data) > 9 else 'maintain'
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
                try:
                    if len(user_data) > 10 and user_data[10] and str(user_data[10]).isdigit():
                        target_calories = int(user_data[10])
                    else:
                        target_calories = daily_norm
                except (ValueError, TypeError):
                    target_calories = daily_norm
                weekly_target = target_calories * 7
                
                if weekly_target > 0:
                    goal_percentage = round((total_week_calories / weekly_target) * 100, 1)
                    goal_text = GOALS.get(goal, '–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ')
                    goal_emoji = "üìâ" if goal == 'lose_weight' else "‚öñÔ∏è" if goal == 'maintain' else "üìà"
                    stats_text += f"\nüéØ **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏ ({goal_emoji} {goal_text}):** {goal_percentage}%"
        except Exception as e:
            logger.error(f"Error calculating weekly percentage: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing week's statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
            ])
        )

__all__.append('handle_stats_week_callback')

async def handle_admin_star_balance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∞–ª–∞–Ω—Å Stars' –≤ –∞–¥–º–∏–Ω–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å Stars
        balance_stars = await get_bot_star_balance()
        
        if balance_stars is not None:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 Star = $0.01)
            usd_equivalent = balance_stars * 0.01
            
            balance_text = f"""
üíé **–ë–∞–ª–∞–Ω—Å Telegram Stars**

üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance_stars:,} ‚≠ê
üíµ **–ü—Ä–∏–º–µ—Ä–Ω–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:** ${usd_equivalent:.2f}

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ 70% –æ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å
‚Ä¢ 30% –∫–æ–º–∏—Å—Å–∏—è Telegram
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: $100
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ

üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
        else:
            balance_text = """
üíé **–ë–∞–ª–∞–Ω—Å Telegram Stars**

‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞**

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ë–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API Telegram
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.
            """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_star_balance")],
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=ADMIN_CALLBACKS['admin_panel'])]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            balance_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_admin_star_balance_callback: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ Stars. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=ADMIN_CALLBACKS['admin_panel'])]
            ])
        )

__all__.append('handle_admin_star_balance_callback')

async def handle_admin_meals_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user.id not in ADMIN_IDS:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            cursor.execute('''
                SELECT 
                    m.id,
                    m.telegram_id,
                    u.name,
                    m.meal_type,
                    m.meal_name,
                    m.calories,
                    m.created_at
                FROM meals m
                JOIN users u ON m.telegram_id = u.telegram_id
                ORDER BY m.created_at DESC
                LIMIT 20
            ''')
            
            meals = cursor.fetchall()
            
            if not meals:
                await query.message.reply_text(
                    "üçΩÔ∏è **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏**\n\n"
                    "üìù –ó–∞–ø–∏—Å–µ–π –æ –µ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=ADMIN_CALLBACKS['admin_panel'])]
                    ]),
                    parse_mode='Markdown'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            meals_text = "üçΩÔ∏è **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏**\n\n"
            
            for meal in meals:
                meal_id, telegram_id, name, meal_type, meal_name, calories, created_at = meal
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                meal_type_emoji = {
                    'meal_breakfast': 'üåÖ',
                    'meal_lunch': 'üåû', 
                    'meal_dinner': 'üåô',
                    'meal_snack': 'üçé'
                }.get(meal_type, 'üçΩÔ∏è')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    created_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = created_dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = created_at
                
                meals_text += f"{meal_type_emoji} **{name}** ({telegram_id})\n"
                meals_text += f"   {meal_name} - {calories} –∫–∫–∞–ª\n"
                meals_text += f"   üìÖ {formatted_date}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–Ω–æ–≥–æ
            keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=ADMIN_CALLBACKS['admin_panel'])]]
            
            if len(meals) >= 20:
                keyboard.insert(0, [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="admin_meals_more")])
            
            await query.message.reply_text(
                meals_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in handle_admin_meals_callback: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data=ADMIN_CALLBACKS['admin_panel'])]
            ])
        )

__all__.append('handle_admin_meals_callback')

