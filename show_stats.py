#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import get_daily_meals_by_type, get_daily_macros, get_user_target_macros, get_user_by_telegram_id
from datetime import datetime

def show_user_stats(telegram_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = get_user_by_telegram_id(telegram_id)
        if not user_data:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Row –≤ —Å–ª–æ–≤–∞—Ä—å
        if hasattr(user_data, 'keys'):
            user_dict = dict(user_data)
        else:
            user_dict = user_data
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_dict.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {user_dict.get('last_name', '')}")
        print(f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        meals_data = get_daily_meals_by_type(telegram_id)
        current_macros = get_daily_macros(telegram_id)
        target_macros = get_user_target_macros(telegram_id)
        
        if not meals_data:
            print("üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        meal_names = {
            'meal_breakfast': 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫',
            'meal_lunch': '‚òÄÔ∏è –û–±–µ–¥', 
            'meal_dinner': 'üåô –£–∂–∏–Ω',
            'meal_snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
        }
        
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carbs = 0
        
        print("\nüçΩÔ∏è **–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:**")
        for meal_type, meal_name in meal_names.items():
            if meal_type in meals_data:
                meal = meals_data[meal_type]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Row –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if hasattr(meal, 'keys'):
                    meal_dict = dict(meal)
                else:
                    meal_dict = meal
                
                calories = meal_dict.get('total_calories', 0)
                protein = meal_dict.get('total_protein', 0)
                fat = meal_dict.get('total_fat', 0)
                carbs = meal_dict.get('total_carbs', 0)
                dishes = meal_dict.get('dishes', '')
                
                total_calories += calories
                total_protein += protein
                total_fat += fat
                total_carbs += carbs
                
                print(f"\n{meal_name}:")
                print(f"  üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª")
                print(f"  ü•© –ë–µ–ª–∫–∏: {protein:.1f}–≥")
                print(f"  üßà –ñ–∏—Ä—ã: {fat:.1f}–≥")
                print(f"  üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥")
                print(f"  üçΩÔ∏è –ë–ª—é–¥–∞: {dishes}")
            else:
                print(f"\n{meal_name}: 0 –∫–∫–∞–ª")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:**")
        print(f"üî• –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories:.0f} –∫–∫–∞–ª")
        print(f"ü•© –ë–µ–ª–∫–∏: {total_protein:.1f}–≥")
        print(f"üßà –ñ–∏—Ä—ã: {total_fat:.1f}–≥")
        print(f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if target_macros:
            print(f"\nüéØ **–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
            print(f"üî• –ö–∞–ª–æ—Ä–∏–∏: {target_macros['calories']:.0f} –∫–∫–∞–ª")
            print(f"ü•© –ë–µ–ª–∫–∏: {target_macros['protein']:.1f}–≥")
            print(f"üßà –ñ–∏—Ä—ã: {target_macros['fat']:.1f}–≥")
            print(f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {target_macros['carbs']:.1f}–≥")
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç —Ü–µ–ª–∏
            calorie_percent = (total_calories / target_macros['calories']) * 100 if target_macros['calories'] > 0 else 0
            protein_percent = (total_protein / target_macros['protein']) * 100 if target_macros['protein'] > 0 else 0
            fat_percent = (total_fat / target_macros['fat']) * 100 if target_macros['fat'] > 0 else 0
            carbs_percent = (total_carbs / target_macros['carbs']) * 100 if target_macros['carbs'] > 0 else 0
            
            print(f"\nüìà **–ü—Ä–æ–≥—Ä–µ—Å—Å (% –æ—Ç —Ü–µ–ª–∏):**")
            print(f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calorie_percent:.1f}%")
            print(f"ü•© –ë–µ–ª–∫–∏: {protein_percent:.1f}%")
            print(f"üßà –ñ–∏—Ä—ã: {fat_percent:.1f}%")
            print(f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs_percent:.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python show_stats.py <telegram_id>")
        print("–ü—Ä–∏–º–µ—Ä: python show_stats.py 160308091")
        return
    
    try:
        telegram_id = int(sys.argv[1])
        show_user_stats(telegram_id)
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: telegram_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
