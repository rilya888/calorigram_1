# Auto-generated module for profile handlers extracted from bot_functions.py
from ._shared import *  # imports, constants, helpers
from constants import GOALS
import bot_functions as bf  # for cross-module handler calls

__all__ = []

async def send_not_registered_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    message = ERROR_MESSAGES['user_not_registered']
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text(message)

__all__.append('send_not_registered_message')

async def handle_timezone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'user_data' not in context.user_data:
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
        )
        return
    
    user_data = context.user_data['user_data']
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–î—Ä—É–≥–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if query.data == 'tz_other':
        from constants import TIMEZONES
        
        keyboard = []
        for tz_key, tz_name in TIMEZONES.items():
            keyboard.append([InlineKeyboardButton(tz_name, callback_data=f"tz_{tz_key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üåç **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—à–∞—Ä–∏–µ
    if query.data.startswith('tz_hemisphere_'):
        from constants import TIMEZONE_HEMISPHERES
        
        hemisphere_key = query.data.replace('tz_hemisphere_', '')
        if hemisphere_key in TIMEZONE_HEMISPHERES:
            hemisphere = TIMEZONE_HEMISPHERES[hemisphere_key]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—É—à–∞—Ä–∏–∏
            keyboard = []
            for offset_key, group in hemisphere['timezones'].items():
                button_text = f"{group['name']} - {group['description']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"tz_group_{offset_key}")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tz_back_to_hemispheres")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üåç **{hemisphere['name']}**\n\n"
                f"{hemisphere['description']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –≥—Ä—É–ø–ø—ã
    if query.data.startswith('tz_group_'):
        from constants import TIMEZONE_GROUPS, TIMEZONES
        
        group_key = query.data.replace('tz_group_', '')
        if group_key in TIMEZONE_GROUPS:
            group = TIMEZONE_GROUPS[group_key]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            keyboard = []
            for tz_key in group['timezones']:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å—Ç–∞—Ä–æ–º —Å–ø–∏—Å–∫–µ TIMEZONES
                tz_name = None
                for old_tz_key, old_tz_name in TIMEZONES.items():
                    if old_tz_key == tz_key:
                        tz_name = old_tz_name
                        break
                
                if tz_name:
                    keyboard.append([InlineKeyboardButton(tz_name, callback_data=f"tz_{tz_key}")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tz_back_to_hemispheres")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üåç **{group['name']} - {group['description']}**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        return
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –ø–æ–ª—É—à–∞—Ä–∏—è–º
    if query.data == 'tz_back_to_hemispheres':
        from constants import TIMEZONE_HEMISPHERES
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—à–∞—Ä–∏—è
        keyboard.append([InlineKeyboardButton("üåç –ó–∞–ø–∞–¥–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ", callback_data="tz_hemisphere_western")])
        keyboard.append([InlineKeyboardButton("üåè –í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ", callback_data="tz_hemisphere_eastern")])
        
        # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        keyboard.append([InlineKeyboardButton("üåç –î—Ä—É–≥–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞", callback_data="tz_other")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:**\n\n"
            "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª—É—à–∞—Ä–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º timezone –∏–∑ callback_data
    timezone = query.data.replace('tz_', '')
    user_data['timezone'] = timezone
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    # –í—ã–∑—ã–≤–∞–µ–º complete_registration –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ë–ñ–£
    from handlers.misc import complete_registration
    await complete_registration(update, context)

__all__.append('handle_timezone_callback')

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = update.effective_user
    logger.info(f"Profile command called by user {user.id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = check_user_registration(user.id)
        
        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ user_data
        logger.info(f"DEBUG user_data: {user_data}")
        if user_data:
            logger.info(f"DEBUG user_data length: {len(user_data)}")
            for i, value in enumerate(user_data):
                logger.info(f"DEBUG user_data[{i}]: {value} (type: {type(value)})")
        
        if not user_data:
            await bf.send_not_registered_message(update, context)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_info = check_user_subscription(user.id)
        logger.info(f"Subscription info for user {user.id}: {subscription_info}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_text = ""
        if subscription_info['is_active']:
            if subscription_info['type'] == 'trial':
                subscription_text = f"üÜì –¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: {subscription_info['expires_at']}"
            elif subscription_info['type'] == 'premium':
                if subscription_info['expires_at']:
                    subscription_text = f"‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info['expires_at']}"
                else:
                    subscription_text = "‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        else:
            if subscription_info['type'] == 'trial_expired':
                subscription_text = f"‚ùå –¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫\n–ò—Å—Ç–µ–∫: {subscription_info['expires_at']}"
            elif subscription_info['type'] == 'premium_expired':
                subscription_text = f"‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n–ò—Å—Ç–µ–∫–ª–∞: {subscription_info['expires_at']}"
            else:
                subscription_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –Ω–æ—Ä–º–µ –∫–∞–ª–æ—Ä–∏–π
        goal = user_data[9] if len(user_data) > 9 and user_data[9] else 'maintain'
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
        # user_data[8] - daily_calories, user_data[9] - goal, user_data[10] - target_calories
        if len(user_data) > 10 and user_data[10] and str(user_data[10]).isdigit():
            target_calories = int(user_data[10])
        else:
            target_calories = int(user_data[8])  # fallback to daily_calories
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ü–µ–ª–∏
        goal_text = GOALS.get(goal, '–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ')
        goal_emoji = "üìâ" if goal == 'lose_weight' else "‚öñÔ∏è" if goal == 'maintain' else "üìà"
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è (user_data[17])
        timezone = user_data[17] if len(user_data) > 17 else 'UTC'
        
        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ user_data
        logger.info(f"DEBUG user_data: {user_data}")
        logger.info(f"DEBUG timezone: {timezone} (type: {type(timezone)})")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from constants import TIMEZONES
        timezone_name = TIMEZONES.get(timezone, timezone)
        logger.info(f"DEBUG timezone_name: {timezone_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ë–ñ–£ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # user_data[11] = target_protein, user_data[12] = target_fat, user_data[13] = target_carbs
        target_protein = user_data[11] if len(user_data) > 11 and user_data[11] else 0.0
        target_fat = user_data[12] if len(user_data) > 12 and user_data[12] else 0.0
        target_carbs = user_data[13] if len(user_data) > 13 and user_data[13] else 0.0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç—Ä–æ–∫–∏
        try:
            target_protein = float(target_protein) if target_protein else 0.0
            target_fat = float(target_fat) if target_fat else 0.0
            target_carbs = float(target_carbs) if target_carbs else 0.0
        except (ValueError, TypeError):
            target_protein = 0.0
            target_fat = 0.0
            target_carbs = 0.0
        
        profile_text = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üìù –ò–º—è: {user_data[2]}
üë§ –ü–æ–ª: {user_data[3]}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[4]} –ª–µ—Ç
üìè –†–æ—Å—Ç: {user_data[5]} —Å–º
‚öñÔ∏è –í–µ—Å: {user_data[6]} –∫–≥
üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data[7]}
üéØ –¶–µ–ª—å: {goal_emoji} {goal_text}
üìä –†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞: {user_data[8]} –∫–∫–∞–ª
üéØ –¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞: {target_calories} –∫–∫–∞–ª

ü•ó –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ë–ñ–£:
‚Ä¢ –ë–µ–ª–∫–∏: {target_protein:.1f}–≥
‚Ä¢ –ñ–∏—Ä—ã: {target_fat:.1f}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {target_carbs:.1f}–≥

üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_name}

{subscription_text}"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        profile_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="terms")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await update.message.reply_text(profile_text, reply_markup=profile_keyboard)
    except Exception as e:
        logger.error(f"Error in profile_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('profile_command')

async def addmeal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addmeal"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if not existing_user:
            await bf.send_not_registered_message(update, context)
            return
    except Exception as e:
        logger.error(f"Error in addmeal_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞
    keyboard = [
        [InlineKeyboardButton("üì∑ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ", callback_data="analyze_photo")],
        [InlineKeyboardButton("üìù –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="analyze_text")],
        [InlineKeyboardButton("üé§ –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É", callback_data="analyze_voice")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üçΩÔ∏è **–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('addmeal_command')

async def show_meal_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ —Å –ë–ñ–£ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = check_user_registration(user.id)
        if not user_data:
            await bf.send_not_registered_message(update, context)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from database import get_daily_macros, get_daily_meals_by_type, get_user_target_macros
        from utils.progress_bars import create_calorie_progress_bar, create_macro_progress_bar, create_meal_breakdown
        from utils.macros_calculator import get_macro_recommendations
        
        current_macros = get_daily_macros(user.id)
        target_macros = get_user_target_macros(user.id)
        meals_data = get_daily_meals_by_type(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        calorie_bar = create_calorie_progress_bar(current_macros['calories'], target_macros['calories'])
        
        protein_bar = create_macro_progress_bar(
            current_macros['protein'], 
            target_macros['protein'], 
            "–ë–µ–ª–∫–∏", 
            "–≥"
        )
        
        fat_bar = create_macro_progress_bar(
            current_macros['fat'], 
            target_macros['fat'], 
            "–ñ–∏—Ä—ã", 
            "–≥"
        )
        
        carbs_bar = create_macro_progress_bar(
            current_macros['carbs'], 
            target_macros['carbs'], 
            "–£–≥–ª–µ–≤–æ–¥—ã", 
            "–≥"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        meal_breakdown = create_meal_breakdown(meals_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_macro_recommendations(current_macros, target_macros)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**

{calorie_bar}

ü•ó **–ë–ñ–£:**
{protein_bar}
{fat_bar}
{carbs_bar}

{meal_breakdown}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{recommendations}"""
        
        await query.edit_message_text(
            stats_message,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="statistics")]
            ]),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing meal statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="statistics")]
            ])
        )

__all__.append('show_meal_statistics')