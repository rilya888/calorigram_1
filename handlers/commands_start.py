# Auto-generated module for commands_start handlers extracted from bot_functions.py
from ._shared import *  # imports, constants, helpers
import bot_functions as bf  # for cross-module handler calls

__all__ = []

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return await show_main_menu_from_handler(update, context)

__all__.append('show_main_menu')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    return await start_command_from_handler(update, context)

__all__.append('start_command')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    return await help_command_from_handler(update, context)

__all__.append('help_command')

async def handle_menu_from_meal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    await query.message.reply_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard(user_id),
        parse_mode='Markdown'
    )

__all__.append('handle_menu_from_meal_selection')

async def show_admin_manage_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, telegram_id: int, user_data: Optional[Tuple[Any, ...]]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = check_user_subscription(telegram_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_text = ""
    if subscription_info['is_active']:
        if subscription_info['type'] == 'trial':
            subscription_text = f"üÜì <b>–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: {subscription_info['expires_at']}"
        elif subscription_info['type'] == 'premium':
            if subscription_info['expires_at']:
                subscription_text = f"‚≠ê <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_info['expires_at']}"
            else:
                subscription_text = "‚≠ê <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    else:
        if subscription_info['type'] == 'trial_expired':
            subscription_text = f"‚ùå <b>–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫</b>\n–ò—Å—Ç–µ–∫: {subscription_info['expires_at']}"
        elif subscription_info['type'] == 'premium_expired':
            subscription_text = f"‚ùå <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n–ò—Å—Ç–µ–∫–ª–∞: {subscription_info['expires_at']}"
        else:
            subscription_text = "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    safe_name = str(user_data[2]).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
    safe_date = str(user_data[16] if len(user_data) > 16 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
    
    manage_text = f"""
üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üìù <b>–ò–º—è:</b> {safe_name}
üÜî <b>Telegram ID:</b> {telegram_id}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {safe_date}

{subscription_text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    keyboard = [
        [InlineKeyboardButton("üÜì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª (1 –¥–µ–Ω—å)", callback_data=f"{ADMIN_CALLBACKS['admin_activate_trial']}:{telegram_id}")],
        [InlineKeyboardButton("‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º (30 –¥–Ω–µ–π)", callback_data=f"{ADMIN_CALLBACKS['admin_activate_premium']}:{telegram_id}")],
        [InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"{ADMIN_CALLBACKS['admin_deactivate_subscription']}:{telegram_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data=ADMIN_CALLBACKS['admin_subscriptions'])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        manage_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

__all__.append('show_admin_manage_subscription_menu')

async def show_subscription_purchase_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = check_user_subscription(user.id)
        
        if subscription_info['is_active']:
            await query.edit_message_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                f"üìã **–¢–∏–ø:** {subscription_info['type']}\n"
                f"‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {subscription_info['expires_at']}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = [
            [InlineKeyboardButton(
                f"üíé {SUBSCRIPTION_DESCRIPTIONS['premium_7_days']}", 
                callback_data="buy_premium_7_days"
            )],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """
üíé **–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É**

üåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars**
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É

üì± **–í–∞–∂–Ω–æ:** –û–ø–ª–∞—Ç–∞ Stars –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram

üí° –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing subscription purchase menu: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('show_subscription_purchase_menu')

