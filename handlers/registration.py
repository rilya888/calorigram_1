"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from typing import Optional, Tuple, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_connection
from constants import (
    GENDERS, MIN_AGE, MAX_AGE, MIN_HEIGHT, MAX_HEIGHT, 
    MIN_WEIGHT, MAX_WEIGHT, ACTIVITY_LEVELS
)
import utils
from logging_config import get_logger

logger = get_logger(__name__)


# ==================== VALIDATION FUNCTIONS ====================

def validate_user_input(telegram_id: int, name: str, gender: str, age: int, 
                       height: float, weight: float, activity_level: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram_id
        if not utils.validate_telegram_id(telegram_id):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
        if not name or len(name.strip()) < 2 or len(name.strip()) > 50:
            return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª
        if gender not in GENDERS:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        if not isinstance(age, int) or age < MIN_AGE or age > MAX_AGE:
            return False, f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç
        if not isinstance(height, (int, float)) or height < MIN_HEIGHT or height > MAX_HEIGHT:
            return False, f"–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_HEIGHT} –¥–æ {MAX_HEIGHT} —Å–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å
        if not isinstance(weight, (int, float)) or weight < MIN_WEIGHT or weight > MAX_WEIGHT:
            return False, f"–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_WEIGHT} –¥–æ {MAX_WEIGHT} –∫–≥"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if activity_level not in ACTIVITY_LEVELS:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        
        return True, "OK"
        
    except (ValueError, TypeError, AttributeError) as e:
        logger.error(f"Error validating user input: {e}")
        return False, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    except Exception as e:
        logger.error(f"Unexpected error validating user input: {e}")
        return False, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"


def validate_age(age: str) -> Optional[int]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç"""
    try:
        age_int = int(age)
        return age_int if MIN_AGE <= age_int <= MAX_AGE else None
    except (ValueError, TypeError):
        return None


def validate_height(height: str) -> Optional[float]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç"""
    try:
        height_float = float(height.replace(',', '.'))
        return height_float if MIN_HEIGHT <= height_float <= MAX_HEIGHT else None
    except (ValueError, TypeError):
        return None


def validate_weight(weight: str) -> Optional[float]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–µ—Å"""
    try:
        weight_float = float(weight.replace(',', '.'))
        return weight_float if MIN_WEIGHT <= weight_float <= MAX_WEIGHT else None
    except (ValueError, TypeError):
        return None


def check_user_registration(user_id: int) -> Optional[Tuple[Any, ...]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
        return cursor.fetchone()


def calculate_daily_calories(age, height, weight, gender: str, activity_level: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω-–°–µ–Ω –ñ–µ–æ—Ä"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
        age = int(age)
        height = float(height)
        weight = float(weight)
        
        logger.info(f"Calculating calories for: age={age}, height={height}, weight={weight}, gender={gender}, activity={activity_level}")
        
        # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω-–°–µ–Ω –ñ–µ–æ—Ä (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)
        if gender == '–ú—É–∂—Å–∫–æ–π':
            # BMR –¥–ª—è –º—É–∂—á–∏–Ω = (10 * weight) + (6.25 * height) - (5 * age) + 5
            bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5
        else:  # –ñ–µ–Ω—Å–∫–∏–π
            # BMR –¥–ª—è –∂–µ–Ω—â–∏–Ω = (10 * weight) + (6.25 * height) - (5 * age) - 161
            bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        multiplier = ACTIVITY_LEVELS.get(activity_level, 1.55)
        daily_calories = int(bmr * multiplier)
        
        logger.info(f"Calculated BMR: {bmr}, multiplier: {multiplier}, daily_calories: {daily_calories}")
        
        return daily_calories
        
    except Exception as e:
        logger.error(f"Error calculating daily calories: {e}")
        return 2000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def calculate_target_calories(daily_calories: int, goal: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if goal == 'lose_weight':
        return int(daily_calories * 0.8)  # –î–µ—Ñ–∏—Ü–∏—Ç 20%
    elif goal == 'gain_weight':
        return int(daily_calories * 1.2)  # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 20%
    else:  # maintain - –î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ
        return daily_calories


# ==================== COMMAND HANDLERS ====================

async def send_not_registered_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await update.message.reply_text(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )


async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if existing_user:
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['registration_step'] = 'name'
        context.user_data['user_data'] = {'telegram_id': user.id}
        
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    except Exception as e:
        logger.error(f"Error in register_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_text_input_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'registration_step' not in context.user_data:
        return False
    
    text = update.message.text
    step = context.user_data['registration_step']
    user_data = context.user_data['user_data']
    
    if step == 'name':
        user_data['name'] = text
        context.user_data['registration_step'] = 'gender'
        
        keyboard = [
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
        return True
        
    elif step == 'age':
        age = validate_age(text)
        if age is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ({MIN_AGE}-{MAX_AGE}):")
            return True
        user_data['age'] = age
        context.user_data['registration_step'] = 'height'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:")
        return True
            
    elif step == 'height':
        height = validate_height(text)
        if height is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç ({MIN_HEIGHT}-{MAX_HEIGHT} —Å–º):")
            return True
        user_data['height'] = height
        context.user_data['registration_step'] = 'weight'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
        return True
            
    elif step == 'weight':
        weight = validate_weight(text)
        if weight is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å ({MIN_WEIGHT}-{MAX_WEIGHT} –∫–≥):")
            return True
        user_data['weight'] = weight
        context.user_data['registration_step'] = 'activity'
        
        keyboard = [
            [InlineKeyboardButton("üõå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="activity_minimal")],
            [InlineKeyboardButton("üèÉ –õ–µ–≥–∫–∞—è", callback_data="activity_light")],
            [InlineKeyboardButton("üí™ –£–º–µ—Ä–µ–Ω–Ω–∞—è", callback_data="activity_moderate")],
            [InlineKeyboardButton("üî• –í—ã—Å–æ–∫–∞—è", callback_data="activity_high")],
            [InlineKeyboardButton("‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", callback_data="activity_very_high")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )
        return True
    
    return False


# ==================== CALLBACK HANDLERS ====================

async def handle_register_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if existing_user:
            await query.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['registration_step'] = 'name'
        context.user_data['user_data'] = {'telegram_id': user.id}
        
        await query.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        
    except Exception as e:
        logger.error(f"Error in register callback: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('gender_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            return
            
        user_data = context.user_data['user_data']
        
        if query.data == 'gender_male':
            user_data['gender'] = '–ú—É–∂—Å–∫–æ–π'
        elif query.data == 'gender_female':
            user_data['gender'] = '–ñ–µ–Ω—Å–∫–∏–π'
        
        context.user_data['registration_step'] = 'age'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


async def handle_activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('activity_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            return
            
        activity_levels = {
            'activity_minimal': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
            'activity_light': '–õ–µ–≥–∫–∞—è',
            'activity_moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
            'activity_high': '–í—ã—Å–æ–∫–∞—è',
            'activity_very_high': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
        }
        
        user_data = context.user_data['user_data']
        user_data['activity_level'] = activity_levels[query.data]
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏
        context.user_data['registration_step'] = 'goal'
        
        keyboard = [
            [InlineKeyboardButton("üìâ –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose_weight")],
            [InlineKeyboardButton("‚öñÔ∏è –î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ", callback_data="goal_maintain")],
            [InlineKeyboardButton("üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å", callback_data="goal_gain_weight")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:**\n\n"
            "‚Ä¢ **–ü–æ—Ö—É–¥–µ—Ç—å** - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞\n"
            "‚Ä¢ **–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ** - –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞\n"
            "‚Ä¢ **–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å** - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def handle_goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('goal_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            return
            
        goals = {
            'goal_lose_weight': '–ü–æ—Ö—É–¥–µ—Ç—å',
            'goal_maintain': '–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ',
            'goal_gain_weight': '–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å'
        }
        
        user_data = context.user_data['user_data']
        user_data['goal'] = goals[query.data]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
        daily_calories = calculate_daily_calories(
            user_data['age'],
            user_data['height'],
            user_data['weight'],
            user_data['gender'],
            user_data['activity_level']
        )
        
        target_calories = calculate_target_calories(daily_calories, user_data['goal'])
        
        user_data['daily_calories'] = daily_calories
        user_data['target_calories'] = target_calories
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        is_valid, error_message = validate_user_input(
            user_data['telegram_id'],
            user_data['name'],
            user_data['gender'],
            user_data['age'],
            user_data['height'],
            user_data['weight'],
            user_data['activity_level']
        )
        
        if not is_valid:
            await query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_message}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            context.user_data.clear()
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ë–ñ–£
        from utils.macros_calculator import calculate_daily_macros
        
        target_macros = calculate_daily_macros(
            weight=user_data['weight'],
            activity_level=user_data['activity_level'],
            goal=user_data['goal'],
            target_calories=user_data['target_calories']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO users (
                        telegram_id, name, gender, age, height, weight, 
                        activity_level, goal, daily_calories, target_calories,
                        target_protein, target_fat, target_carbs
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    user_data['telegram_id'],
                    user_data['name'],
                    user_data['gender'],
                    user_data['age'],
                    user_data['height'],
                    user_data['weight'],
                    user_data['activity_level'],
                    user_data['goal'],
                    user_data['daily_calories'],
                    user_data['target_calories'],
                    target_macros['protein'],
                    target_macros['fat'],
                    target_macros['carbs']
                ))
                conn.commit()
            
            success_message = f"""
‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è: {user_data['name']}
‚Ä¢ –ü–æ–ª: {user_data['gender']}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç
‚Ä¢ –†–æ—Å—Ç: {user_data['height']} —Å–º
‚Ä¢ –í–µ—Å: {user_data['weight']} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity_level']}
‚Ä¢ –¶–µ–ª—å: {user_data['goal']}

üî• –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_data['daily_calories']} –∫–∫–∞–ª
üéØ –¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞: {user_data['target_calories']} –∫–∫–∞–ª

ü•ó –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ë–ñ–£:
‚Ä¢ –ë–µ–ª–∫–∏: {target_macros['protein']}–≥ ({target_macros['protein_calories']} –∫–∫–∞–ª)
‚Ä¢ –ñ–∏—Ä—ã: {target_macros['fat']}–≥ ({target_macros['fat_calories']} –∫–∫–∞–ª)
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {target_macros['carbs']}–≥ ({target_macros['carb_calories']} –∫–∫–∞–ª)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            """
            
            await query.edit_message_text(success_message)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            context.user_data.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_data['telegram_id'],))
                db_user_data = cursor.fetchone()
            
            if db_user_data:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"Calling show_welcome_message_with_data for user {user_data['telegram_id']}")
                from handlers.menu import show_welcome_message_with_data
                await show_welcome_message_with_data(update, context, db_user_data)
            else:
                # Fallback –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                logger.warning(f"No user data found in DB for user {user_data['telegram_id']}")
                from handlers.menu import show_main_menu
                await show_main_menu(update, context)
            
        except Exception as e:
            logger.error(f"Error saving user data: {e}")
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
            )
            context.user_data.clear()

