# Auto-generated shared module extracted from bot_functions.py
# Contains imports, constants, classes, and helper functions.
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import BOT_TOKEN, ADMIN_IDS
from api_client import api_client
from database import (
    get_user_by_telegram_id, create_user_with_goal, delete_user_by_telegram_id,
    add_meal, get_daily_calories, get_meal_statistics, get_daily_meals_by_type, 
    is_meal_already_added, get_weekly_meals_by_type, delete_today_meals, delete_all_user_meals,
    get_all_users_for_broadcast, get_all_users_for_admin, get_user_count, get_meals_count, 
    get_recent_meals, get_daily_stats, check_user_subscription, activate_premium_subscription, 
    get_daily_calorie_checks_count, add_calorie_check, reset_daily_calorie_checks,
    get_user_registration_history, create_user_registration_history, mark_trial_as_used
)
from constants import (
    ADMIN_CALLBACKS, SUBSCRIPTION_DESCRIPTIONS
)
from logging_config import get_logger
import re

# –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –º–æ–¥—É–ª–µ–π
from handlers.registration import (
    validate_user_input,
    validate_age,
    validate_height,
    validate_weight,
    check_user_registration,
    calculate_daily_calories,
    calculate_target_calories,
)

from handlers.subscription import (
    subscription_command,
    check_subscription_access,
    get_subscription_message,
)

from handlers.menu import (
    start_command,
    help_command,
    terms_command,
    show_main_menu,
    get_main_menu_keyboard,
    get_main_menu_keyboard_for_user,
    get_analysis_result_keyboard,
    handle_back_to_main,
)

from handlers.misc import (
    reset_command,
)

from services.food_analysis_service import (
    extract_weight_from_description,
    extract_calories_from_analysis,
    extract_macros_from_analysis,
    extract_dish_name_from_analysis,
    is_valid_analysis,
    clean_markdown_text,
    remove_explanations_from_analysis,
    analyze_food_photo,
    analyze_food_text,
    analyze_food_supplement,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ main.py
logger = get_logger(__name__)

# –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

def extract_calories_per_100g_from_analysis(analysis_text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if not analysis_text or not isinstance(analysis_text, str):
            return None
            
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –Ω–∞ 100–≥
        patterns = [
            r'(\d+)\s*–∫–∫–∞–ª/100–≥',
            r'(\d+)\s*–∫–∫–∞–ª/100\s*–≥',
            r'(\d+)\s*–∫–∫–∞–ª\s*–Ω–∞\s*100\s*–≥',
            r'(\d+)\s*–∫–∫–∞–ª\s*–Ω–∞\s*100–≥',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\s*–Ω–∞\s*100–≥:\s*(\d+)',
            r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\s*–Ω–∞\s*100\s*–≥:\s*(\d+)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, analysis_text, re.IGNORECASE)
            if match:
                calories = int(match.group(1))
                if 10 <= calories <= 1000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –Ω–∞ 100–≥
                    logger.info(f"Extracted calories per 100g: {calories} from pattern: {pattern}")
                    return calories
        
        return None
    except Exception as e:
        logger.warning(f"Error extracting calories per 100g: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã

def parse_quantity_from_description(description: str) -> Tuple[float, str]:
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    try:
        description = description.lower().strip()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        patterns = [
            # –ö–∏–ª–æ–≥—Ä–∞–º–º—ã
            (r'(\d+(?:\.\d+)?)\s*–∫–≥', lambda x: float(x) * 1000, '–≥'),
            (r'(\d+(?:\.\d+)?)\s*–∫–∏–ª–æ–≥—Ä–∞–º–º', lambda x: float(x) * 1000, '–≥'),
            (r'(\d+(?:\.\d+)?)\s*kg', lambda x: float(x) * 1000, '–≥'),
            
            # –ì—Ä–∞–º–º—ã
            (r'(\d+(?:\.\d+)?)\s*–≥', lambda x: float(x), '–≥'),
            (r'(\d+(?:\.\d+)?)\s*–≥—Ä–∞–º–º', lambda x: float(x), '–≥'),
            (r'(\d+(?:\.\d+)?)\s*g', lambda x: float(x), '–≥'),
            
            # –õ–∏—Ç—Ä—ã
            (r'(\d+(?:\.\d+)?)\s*–ª', lambda x: float(x) * 1000, '–º–ª'),
            (r'(\d+(?:\.\d+)?)\s*–ª–∏—Ç—Ä', lambda x: float(x) * 1000, '–º–ª'),
            (r'(\d+(?:\.\d+)?)\s*l', lambda x: float(x) * 1000, '–º–ª'),
            
            # –ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã
            (r'(\d+(?:\.\d+)?)\s*–º–ª', lambda x: float(x), '–º–ª'),
            (r'(\d+(?:\.\d+)?)\s*–º–∏–ª–ª–∏–ª–∏—Ç—Ä', lambda x: float(x), '–º–ª'),
            (r'(\d+(?:\.\d+)?)\s*ml', lambda x: float(x), '–º–ª'),
            
            # –®—Ç—É–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø–æ 100–≥)
            (r'(\d+)\s*—à—Ç', lambda x: float(x) * 100, '–≥'),
            (r'(\d+)\s*—à—Ç—É–∫', lambda x: float(x) * 100, '–≥'),
            (r'(\d+)\s*—à—Ç—É–∫–∏', lambda x: float(x) * 100, '–≥'),
            (r'(\d+)\s*pc', lambda x: float(x) * 100, '–≥'),
            
            # –ü–æ—Ä—Ü–∏–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 200–≥)
            (r'(\d+)\s*–ø–æ—Ä—Ü', lambda x: float(x) * 200, '–≥'),
            (r'(\d+)\s*–ø–æ—Ä—Ü–∏–∏', lambda x: float(x) * 200, '–≥'),
            (r'(\d+)\s*–ø–æ—Ä—Ü–∏—è', lambda x: float(x) * 200, '–≥'),
            
            # –°—Ç–∞–∫–∞–Ω—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 250–≥)
            (r'(\d+)\s*—Å—Ç–∞–∫–∞–Ω', lambda x: float(x) * 250, '–≥'),
            (r'(\d+)\s*—Å—Ç–∞–∫–∞–Ω–∞', lambda x: float(x) * 250, '–≥'),
            (r'(\d+)\s*—Å—Ç–∞–∫–∞–Ω–æ–≤', lambda x: float(x) * 250, '–≥'),
            
            # –õ–æ–∂–∫–∏ —Å—Ç–æ–ª–æ–≤—ã–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 15–≥)
            (r'(\d+)\s*—Å—Ç\.\s*–ª\.', lambda x: float(x) * 15, '–≥'),
            (r'(\d+)\s*—Å—Ç–æ–ª–æ–≤—ã—Ö –ª–æ–∂–µ–∫', lambda x: float(x) * 15, '–≥'),
            (r'(\d+)\s*—Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏', lambda x: float(x) * 15, '–≥'),
            
            # –õ–æ–∂–∫–∏ —á–∞–π–Ω—ã–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 5–≥)
            (r'(\d+)\s*—á\.\s*–ª\.', lambda x: float(x) * 5, '–≥'),
            (r'(\d+)\s*—á–∞–π–Ω—ã—Ö –ª–æ–∂–µ–∫', lambda x: float(x) * 5, '–≥'),
            (r'(\d+)\s*—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏', lambda x: float(x) * 5, '–≥'),
        ]
        
        for pattern, converter, unit in patterns:
            match = re.search(pattern, description)
            if match:
                quantity = converter(match.group(1))
                logger.info(f"Parsed quantity: {quantity}{unit} from '{description}'")
                return quantity, unit
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é
        logger.info(f"No quantity found in '{description}', using default 100g")
        return 100.0, '–≥'
        
    except Exception as e:
        logger.error(f"Error parsing quantity from description '{description}': {e}")
        return 100.0, '–≥'

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã

# –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ handlers.admin

def check_subscription_access(telegram_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    return check_subscription_access_from_handler(telegram_id)

def get_subscription_message(access_info: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return get_subscription_message_from_handler(access_info)

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã


# –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è –º–µ–Ω—é








# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã


























# ==================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ====================





async def send_broadcast_message(bot, message_text: str, admin_id: int) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = get_all_users_for_broadcast()
    total_users = len(users)
    sent_count = 0
    failed_count = 0
    blocked_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    try:
        await bot.send_message(
            admin_id,
            f"üì¢ **–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...**\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Failed to send start message to admin: {e}")
    
    for telegram_id, name in users:
        try:
            await bot.send_message(
                telegram_id,
                f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç Calorigram**\n\n{message_text}",
                parse_mode='Markdown'
            )
            sent_count += 1
            logger.info(f"Broadcast sent to {telegram_id} ({name})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.1)
            
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {telegram_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
            if "bot was blocked" in str(e).lower() or "chat not found" in str(e).lower():
                blocked_count += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            admin_id,
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {(sent_count/total_users*100):.1f}%",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data=ADMIN_CALLBACKS['admin_panel'])]
            ]),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Failed to send stats to admin: {e}")
    
    return {
        'total_users': total_users,
        'sent_count': sent_count,
        'failed_count': failed_count,
        'blocked_count': blocked_count
    }







# ==================== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ê–ú–ò ====================









# ==================== –§–£–ù–ö–¶–ò–ò "–£–ó–ù–ê–¢–¨ –ö–ê–õ–û–†–ò–ò" (–ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø) ====================





# –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã

async def transcribe_voice(audio_data: bytes):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é API"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not audio_data:
            logger.error("Invalid audio data provided - data is None or empty")
            return None
            
        if not isinstance(audio_data, bytes):
            logger.error(f"Invalid audio data type: {type(audio_data)}, expected bytes")
            return None
        
        logger.info(f"Audio data validation passed: {len(audio_data)} bytes")
        
        if len(audio_data) < 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ
            logger.error(f"Audio data too small: {len(audio_data)} bytes (minimum: 1000)")
            return None
            
        logger.info("Starting voice transcription...")
        
        async with api_client:
            result = await api_client.analyze_voice(None, None, audio_data)
            
            if result:
                logger.info(f"Voice transcription successful, result length: {len(result)}")
                return result.strip()
            else:
                logger.error("Voice transcription failed - no result returned")
                return None
                
    except Exception as e:
        logger.error(f"Error in voice transcription: {e}")
        return None
















# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ü–õ–ê–¢–´ –ü–û–î–ü–ò–°–ö–ò ====================



async def activate_test_subscription(user_id: int, subscription_type: str, query: Any):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        days_map = {
            'test_1_day': 1,
            'test_7_days': 7,
            'test_30_days': 30,
            'test_90_days': 90,
            'test_365_days': 365
        }
        
        days = days_map.get(subscription_type, 1)
        description = SUBSCRIPTION_DESCRIPTIONS[subscription_type]
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        activate_premium_subscription(user_id, days)
        
        await query.edit_message_text(
            f"üéâ **{description} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
            f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {days} –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π\n\n"
            f"üß™ **–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞** - –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–æ—Å—å\n\n"
            f"üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
            ]),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error activating test subscription: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

async def activate_trial_subscription(user_id: int, query: Any):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª"""
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–∞–ª –Ω–∞ 1 –¥–µ–Ω—å
        activate_premium_subscription(user_id, 1)
        
        await query.edit_message_text(
            "üéâ **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\n\n"
            "üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
            ]),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error activating trial subscription: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def create_payment_invoice(user_id: int, subscription_type: str, price: int, query: Any, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if price > 10000:  # –ú–∞–∫—Å–∏–º—É–º 10,000 Stars —Å–æ–≥–ª–∞—Å–Ω–æ Bot API 9.0+
            await query.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞:** –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞!\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: 10,000 ‚≠ê\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="buy_subscription")]
                ]),
                parse_mode='Markdown'
            )
            return
        
        if price < 1:  # –ú–∏–Ω–∏–º—É–º 1 Star
            await query.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞:** –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞!\n\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: 1 ‚≠ê",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="buy_subscription")]
                ]),
                parse_mode='Markdown'
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        days_map = {
            'premium_7_days': 7
        }
        
        days = days_map.get(subscription_type, 30)
        description = SUBSCRIPTION_DESCRIPTIONS[subscription_type]
        
        # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        balance_info = ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['pending_payment'] = {
            'subscription_type': subscription_type,
            'price': price,
            'days': days,
            'user_id': user_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        from telegram import LabeledPrice
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Telegram Stars
        invoice_title = f"–ü–æ–¥–ø–∏—Å–∫–∞ Calorigram - {description}"
        
        invoice_description = f"–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É Calorigram –Ω–∞ {days} –¥–Ω–µ–π{balance_info}"
        
        await query.message.reply_invoice(
            title=invoice_title,
            description=invoice_description,
            payload=f"subscription_{subscription_type}",
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
            currency="XTR",  # Telegram Stars currency
            prices=[LabeledPrice(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π", price)]  # –¶–µ–Ω–∞ –≤ Stars (–±–µ–∑ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100)
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
        logger.info(f"Created invoice: user {user_id}, subscription {subscription_type}, {price} Stars, {days} days")
        
    except Exception as e:
        logger.error(f"Error creating payment invoice: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="buy_subscription")]
            ])
        )



async def get_bot_star_balance():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ get_my_star_balance() 
        # –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ python-telegram-bot
        # NOTE: –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        return None
    except Exception as e:
        logger.error(f"Error getting bot star balance: {e}")
        return None









# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ












