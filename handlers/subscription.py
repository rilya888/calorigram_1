"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from typing import Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes

from database import (
    get_user_by_telegram_id,
    check_user_subscription,
    activate_premium_subscription,
    get_user_registration_history,
    create_user_registration_history,
    mark_trial_as_used
)
from constants import SUBSCRIPTION_PRICES, SUBSCRIPTION_DESCRIPTIONS
from config import BOT_TOKEN, TEST_MODE
from logging_config import get_logger

logger = get_logger(__name__)


# ==================== SUBSCRIPTION UTILITY FUNCTIONS ====================

def check_subscription_access(telegram_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    try:
        subscription = check_user_subscription(telegram_id)
        
        if subscription['is_active']:
            return {
                'has_access': True,
                'subscription_type': subscription['type'],
                'expires_at': subscription['expires_at']
            }
        else:
            return {
                'has_access': False,
                'subscription_type': subscription['type'],
                'expires_at': subscription['expires_at']
            }
    except Exception as e:
        logger.error(f"Error checking subscription access: {e}")
        return {'has_access': False, 'subscription_type': 'error', 'expires_at': None}


def get_subscription_message(access_info: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if access_info['has_access']:
        if access_info['subscription_type'] == 'trial':
            return f"üÜì **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥**\n\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: {access_info['expires_at']}\n\n–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
        elif access_info['subscription_type'] == 'premium':
            return f"‚≠ê **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞**\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {access_info['expires_at'] or '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    else:
        if access_info['subscription_type'] == 'trial_expired':
            return "‚ùå **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫**\n\n–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\nüåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:**\n‚Ä¢ 7 –¥–Ω–µ–π - 10 ‚≠ê\n\nüíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π"
        elif access_info['subscription_type'] == 'trial_used':
            return "‚ùå **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**\n\n–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\nüåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:**\n‚Ä¢ 7 –¥–Ω–µ–π - 10 ‚≠ê\n\nüíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π"
        else:
            return "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏**\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\nüåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:**\n‚Ä¢ 7 –¥–Ω–µ–π - 10 ‚≠ê\n\nüíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π"
    
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"


# ==================== COMMAND HANDLERS ====================

async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user = update.effective_user
    
    try:
        user_data = get_user_by_telegram_id(user.id)
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = check_user_subscription(user.id)
        
        if subscription['is_active']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            message = f"""
‚≠ê **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞**

–¢–∏–ø: {subscription['type']}
–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['expires_at'] or '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Calorigram!
            """
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            message = f"""
üíé **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏**

{get_subscription_message(check_subscription_access(user.id))}

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:**
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

üåü –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!
            """
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = []
        
        if not subscription['is_active']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∏–∞–ª
            history = get_user_registration_history(user.id)
            
            if not history or not history.get('trial_used', False):
                keyboard.append([InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (3 –¥–Ω—è)", callback_data="activate_trial")])
            
            keyboard.append([InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (7 –¥–Ω–µ–π - {SUBSCRIPTION_PRICES['week']} Stars)", callback_data="purchase_week")])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in subscription_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")


# ==================== SUBSCRIPTION ACTIVATION ====================

async def activate_test_subscription(user_id: int, subscription_type: str, query: Any):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (—Ç–æ–ª—å–∫–æ –≤ TEST_MODE)"""
    if not TEST_MODE:
        await query.edit_message_text(
            "‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        )
        return
    
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
        days = 7 if subscription_type == 'week' else 30
        activate_premium_subscription(user_id, days=days)
        
        await query.edit_message_text(
            f"‚úÖ **–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
            f"–¢–∏–ø: {subscription_type}\n"
            f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n\n"
            f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."
        )
        
    except Exception as e:
        logger.error(f"Error activating test subscription: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")


async def activate_trial_subscription(user_id: int, query: Any):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∏–∞–ª —Ä–∞–Ω–µ–µ
        history = get_user_registration_history(user_id)
        
        if history and history.get('trial_used', False):
            await query.edit_message_text(
                "‚ùå **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**\n\n"
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
            )
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –¥–Ω—è
        activate_premium_subscription(user_id, days=3)
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ç—Ä–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if not history:
            create_user_registration_history(user_id)
        mark_trial_as_used(user_id)
        
        await query.edit_message_text(
            "‚úÖ **–¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "üÜì –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ 3 –¥–Ω—è\n\n"
            "–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
        )
        
    except Exception as e:
        logger.error(f"Error activating trial: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")


async def create_payment_invoice(user_id: int, subscription_type: str, price: int, query: Any, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ Calorigram ({subscription_type})"
        description = SUBSCRIPTION_DESCRIPTIONS.get(subscription_type, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ Calorigram")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await context.bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            payload=f"subscription_{subscription_type}_{user_id}",
            provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(label=title, amount=price)]
        )
        
        await query.edit_message_text(
            "üí≥ **–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        
    except Exception as e:
        logger.error(f"Error creating payment invoice: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ==================== CALLBACK HANDLERS ====================

async def handle_subscription_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    if query.data == "purchase_week":
        subscription_type = "week"
        price = SUBSCRIPTION_PRICES['week']
    elif query.data == "purchase_month":
        subscription_type = "month"
        price = SUBSCRIPTION_PRICES.get('month', 30)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await create_payment_invoice(user_id, subscription_type, price, query, context)


async def handle_activate_trial_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    await activate_trial_subscription(user_id, query)


async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.pre_checkout_query
    
    try:
        # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout
        await query.answer(ok=True)
        logger.info(f"Pre-checkout approved for user {query.from_user.id}, payload: {query.invoice_payload}")
        
    except Exception as e:
        logger.error(f"Error in pre-checkout: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    
    try:
        logger.info(f"Successful payment from user {user_id}: {payment.invoice_payload}")
        
        # –ü–∞—Ä—Å–∏–º payload –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        payload_parts = payment.invoice_payload.split('_')
        
        if len(payload_parts) >= 2:
            subscription_type = payload_parts[1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            days = 7 if subscription_type == "week" else 30
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            activate_premium_subscription(user_id, days=days)
            
            await update.message.reply_text(
                f"‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                f"‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
            )
        else:
            logger.error(f"Invalid payload format: {payment.invoice_payload}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
    except Exception as e:
        logger.error(f"Error handling successful payment: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def show_subscription_purchase_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query if hasattr(update, 'callback_query') and update.callback_query else None
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∏–∞–ª
        history = get_user_registration_history(user_id)
        
        message = """
üíé **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ Calorigram**

**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥ (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å)
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–æ—Ä–∏–π
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:**
‚Ä¢ 7 –¥–Ω–µ–π - 10 ‚≠ê

üíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π
        """
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç—Ä–∏–∞–ª–∞, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        if not history or not history.get('trial_used', False):
            keyboard.append([
                InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (3 –¥–Ω—è)", callback_data="activate_trial")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton(f"‚≠ê 7 –¥–Ω–µ–π - {SUBSCRIPTION_PRICES['week']} Stars", callback_data="purchase_week")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error showing subscription menu: {e}")
        if query:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏")

