# Auto-generated module for misc handlers extracted from bot_functions.py
from ._shared import *  # imports, constants, helpers
import bot_functions as bf  # for cross-module handler calls
from logging_config import get_logger
from handlers.registration import check_user_registration, validate_age, validate_height, validate_weight
from handlers.admin import is_admin
from handlers.subscription import check_subscription_access
from handlers.menu import get_main_menu_keyboard, get_main_menu_keyboard_for_user, get_analysis_result_keyboard
from handlers.media import handle_photo_with_text
from services.food_analysis_service import (
    analyze_food_text, 
    analyze_food_supplement,
    is_valid_analysis, 
    remove_explanations_from_analysis, 
    extract_calories_from_analysis,
    extract_macros_from_analysis,
    extract_weight_from_description,
    extract_calories_per_100g_from_analysis,
    extract_dish_name_from_analysis,
    clean_markdown_text
)
from database import get_user_by_telegram_id, check_user_subscription, get_daily_calorie_checks_count, add_meal, add_calorie_check, get_daily_calories
from constants import MIN_AGE, MAX_AGE, MIN_HEIGHT, MAX_HEIGHT, MIN_WEIGHT, MAX_WEIGHT

logger = get_logger(__name__)

__all__ = []

async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms - —É—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    return await terms_command_from_handler(update, context)

__all__.append('terms_command')

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if existing_user:
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['registration_step'] = 'name'
        context.user_data['user_data'] = {'telegram_id': user.id}
        
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    except Exception as e:
        logger.error(f"Error in register_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('register_command')

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ Telegram ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    if context.user_data.get('admin_waiting_for_telegram_id', False):
        await bf.handle_admin_telegram_id_input(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞
    if (context.user_data.get('waiting_for_text', False) or 
        context.user_data.get('waiting_for_check_text', False) or
        context.user_data.get('waiting_for_text_after_photo', False) or
        context.user_data.get('waiting_for_check_text_after_photo', False)):
        await bf.handle_food_text_analysis(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    waiting_for_additional = context.user_data.get('waiting_for_additional_text', False)
    waiting_for_check_additional = context.user_data.get('waiting_for_check_additional_text', False)
    
    logger.info(f"Text input for user {user.id}: waiting_for_additional_text={waiting_for_additional}, waiting_for_check_additional_text={waiting_for_check_additional}")
    
    if waiting_for_additional:
        logger.info(f"Handling additional text analysis for user {user.id}")
        await bf.handle_additional_text_analysis(update, context)
        return
    
    if waiting_for_check_additional:
        logger.info(f"Handling check additional text analysis for user {user.id}")
        await bf.handle_check_additional_text_analysis(update, context)
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"Text input for user {user.id}: waiting_for_additional_text={context.user_data.get('waiting_for_additional_text', False)}, waiting_for_check_additional_text={context.user_data.get('waiting_for_check_additional_text', False)}")
    logger.info(f"All user_data flags: {[k for k, v in context.user_data.items() if 'waiting' in k or 'additional' in k]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    if context.user_data.get('waiting_for_broadcast_text', False):
        await bf.handle_broadcast_text_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'registration_step' not in context.user_data:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")
        return
    
    text = update.message.text
    step = context.user_data['registration_step']
    user_data = context.user_data['user_data']
    
    if step == 'name':
        user_data['name'] = text
        context.user_data['registration_step'] = 'gender'
        
        keyboard = [
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
        
    elif step == 'age':
        age = validate_age(text)
        if age is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ({MIN_AGE}-{MAX_AGE}):")
            return
        user_data['age'] = age
        context.user_data['registration_step'] = 'height'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:")
            
    elif step == 'height':
        height = validate_height(text)
        if height is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç ({MIN_HEIGHT}-{MAX_HEIGHT} —Å–º):")
            return
        user_data['height'] = height
        context.user_data['registration_step'] = 'weight'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
            
    elif step == 'weight':
        weight = validate_weight(text)
        if weight is None:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å ({MIN_WEIGHT}-{MAX_WEIGHT} –∫–≥):")
            return
        user_data['weight'] = weight
        context.user_data['registration_step'] = 'activity'
        
        keyboard = [
            [InlineKeyboardButton("üõå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data="activity_minimal")],
            [InlineKeyboardButton("üèÉ –õ–µ–≥–∫–∞—è", callback_data="activity_light")],
            [InlineKeyboardButton("üí™ –£–º–µ—Ä–µ–Ω–Ω–∞—è", callback_data="activity_moderate")],
            [InlineKeyboardButton("üî• –í—ã—Å–æ–∫–∞—è", callback_data="activity_high")],
            [InlineKeyboardButton("‚ö° –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", callback_data="activity_very_high")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )

__all__.append('handle_text_input')

async def handle_activity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('activity_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            return
            
        activity_levels = {
            'activity_minimal': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è',
            'activity_light': '–õ–µ–≥–∫–∞—è',
            'activity_moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
            'activity_high': '–í—ã—Å–æ–∫–∞—è',
            'activity_very_high': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'
        }
        
        user_data = context.user_data['user_data']
        user_data['activity_level'] = activity_levels[query.data]
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏
        context.user_data['registration_step'] = 'goal'
        
        keyboard = [
            [InlineKeyboardButton("üìâ –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_lose_weight")],
            [InlineKeyboardButton("‚öñÔ∏è –î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ", callback_data="goal_maintain")],
            [InlineKeyboardButton("üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å", callback_data="goal_gain_weight")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:**\n\n"
            "‚Ä¢ **–ü–æ—Ö—É–¥–µ—Ç—å** - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞\n"
            "‚Ä¢ **–î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ** - –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞\n"
            "‚Ä¢ **–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å** - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

__all__.append('handle_activity_callback')

async def handle_goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'user_data' not in context.user_data:
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
        )
        return
    
    goal_mapping = {
        'goal_lose_weight': 'lose_weight',
        'goal_maintain': 'maintain',
        'goal_gain_weight': 'gain_weight'
    }
    
    user_data = context.user_data['user_data']
    user_data['goal'] = goal_mapping[query.data]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    context.user_data['registration_step'] = 'location'
    
    keyboard = [
        [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="send_location")],
        [InlineKeyboardButton("üåç –í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_timezone")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üåç **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n"
        "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('handle_goal_callback')

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if not existing_user:
            await bf.send_not_registered_message(update, context)
            return
    except Exception as e:
        logger.error(f"Error in reset_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    warning_text = """
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** ‚ö†Ô∏è

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
‚Ä¢ –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è

üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û!**

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="reset_confirm")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(warning_text, reply_markup=reply_markup, parse_mode='Markdown')

__all__.append('reset_command')

async def dayreset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dayreset"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = check_user_registration(user.id)
        if not user_data:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        success = delete_today_meals(user.id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ **–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω—ã!**\n\n"
                "–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —É–∂–∏–Ω.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in dayreset command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('dayreset_command')

async def resetcounters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resetcounters - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        success = reset_daily_calorie_checks()
        
        if success:
            await update.message.reply_text(
                "‚úÖ **–°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!**\n\n"
                "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é '–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏' 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )
            
    except Exception as e:
        logger.error(f"Error in resetcounters command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('resetcounters_command')

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if not existing_user:
            await bf.send_not_registered_message(update, context)
            return
    except Exception as e:
        logger.error(f"Error in add_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = [
        [InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="addmeal")],
        [InlineKeyboardButton("‚òÄÔ∏è –û–±–µ–¥", callback_data="addmeal")],
        [InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data="addmeal")],
        [InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data="addmeal")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üçΩÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('add_command')

async def addvoice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addvoice"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = check_user_registration(user.id)
        
        if not existing_user:
            await bf.send_not_registered_message(update, context)
            return
    except Exception as e:
        logger.error(f"Error in addvoice_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π
    context.user_data['waiting_for_check_voice'] = True
    
    await update.message.reply_text(
        "üé§ **–ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª—é–¥–∞, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å.\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:**\n"
        "‚Ä¢ \"–ë–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞ –±–æ—Ä—â–∞ —Å –º—è—Å–æ–º –∏ —Å–º–µ—Ç–∞–Ω–æ–π\"\n"
        "‚Ä¢ \"–î–≤–∞ –∫—É—Å–∫–∞ –ø–∏—Ü—Ü—ã –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\"\n"
        "‚Ä¢ \"–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å—ã—Ä–æ–º –ø–∞—Ä–º–µ–∑–∞–Ω\"\n"
        "‚Ä¢ \"–ü–æ—Ä—Ü–∏—è –∂–∞—Ä–µ–Ω–æ–π –∫–∞—Ä—Ç–æ—à–∫–∏ —Å –ª—É–∫–æ–º\"\n\n"
        "**–£–∫–∞–∂–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:**\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n\n"
        "–ú–æ–¥–µ–ª—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–µ—Ç:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–µ—Å\n"
        "‚Ä¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –†–∞—Å–∫–ª–∞–¥–∫—É –ø–æ –ë–ñ–£",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('addvoice_command')

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback query
    logger.info(f"DEBUG handle_callback_query called with query: {query}")
    logger.info(f"DEBUG query.data: {query.data}")
    logger.info(f"DEBUG query.from_user: {query.from_user}")
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã query
    logger.info(f"DEBUG query attributes: {dir(query)}")
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ update
    logger.info(f"DEBUG update: {update}")
    logger.info(f"DEBUG update.effective_user: {update.effective_user}")
    
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback query: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"Callback query received: {query.data}")
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    logger.info(f"DEBUG handle_callback_query called by user {user.id} with data: {query.data}")
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ callback data
    logger.info(f"DEBUG Available callback data: {query.data}")
    
    if query.data == "register":
        # –î–ª—è callback query –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å query.message.reply_text –≤–º–µ—Å—Ç–æ update.message.reply_text
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            existing_user = check_user_registration(user.id)
            
            if existing_user:
                await query.message.reply_text(
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."
                )
                return
        except Exception as e:
            logger.error(f"Error checking user registration: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['registration_step'] = 'name'
        context.user_data['user_data'] = {'telegram_id': user.id}
        
        await query.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    elif query.data == "help":
        await bf.help_command(update, context)
    elif query.data == "main_menu":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await query.message.reply_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=get_main_menu_keyboard_for_user(update),
            parse_mode='Markdown'
        )
    elif query.data == "subscription":
        await bf.show_subscription_purchase_menu(update, context)
    elif query.data == "buy_subscription":
        await bf.show_subscription_purchase_menu(update, context)
    elif query.data == "terms":
        await bf.terms_command(update, context)
    elif query.data.startswith('gender_'):
        await bf.handle_gender_callback(update, context)
    elif query.data.startswith('activity_'):
        await bf.handle_activity_callback(update, context)
    elif query.data.startswith('goal_'):
        await bf.handle_goal_callback(update, context)
    elif query.data == "send_location":
        await handle_send_location_callback(update, context)
    elif query.data == "manual_timezone":
        await handle_manual_timezone_callback(update, context)
    elif query.data.startswith('tz_') or query.data == 'tz_other' or query.data.startswith('tz_group_') or query.data.startswith('tz_hemisphere_') or query.data == 'tz_back_to_hemispheres':
        await bf.handle_timezone_callback(update, context)
    elif query.data == "reset_confirm":
        await bf.handle_reset_confirm(update, context)
    elif query.data == "add_dish":
        await bf.handle_add_dish(update, context)
    elif query.data == "check_calories":
        await bf.handle_check_calories(update, context)
    elif query.data == "addmeal":
        await bf.handle_addmeal_callback(update, context)
    elif query.data == "menu_from_meal_selection":
        await bf.handle_menu_from_meal_selection(update, context)
    elif query.data == "profile":
        await bf.handle_profile_callback(update, context)
    elif query.data == "back_to_main":
        await bf.handle_back_to_main(update, context)
    elif query.data.startswith('meal_'):
        await bf.handle_meal_selection(update, context)
    elif query.data == "analyze_photo":
        await bf.handle_analyze_photo_callback(update, context)
    elif query.data == "analyze_text":
        await bf.handle_analyze_text_callback(update, context)
    elif query.data == "analyze_voice":
        await bf.handle_analyze_voice_callback(update, context)
    elif query.data == "analyze_photo_text":
        await bf.handle_analyze_photo_text_callback(update, context)
    elif query.data == "check_photo":
        await bf.handle_check_photo_callback(update, context)
    elif query.data == "check_text":
        await bf.handle_check_text_callback(update, context)
    elif query.data == "check_voice":
        await bf.handle_check_voice_callback(update, context)
    elif query.data == "check_photo_text":
        await bf.handle_check_photo_text_callback(update, context)
    elif query.data == "statistics":
        await bf.handle_statistics_callback(update, context)
    elif query.data == "stats_today":
        await bf.handle_stats_today_callback(update, context)
    elif query.data == "stats_yesterday":
        await bf.handle_stats_yesterday_callback(update, context)
    elif query.data == "stats_week":
        await bf.handle_stats_week_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_stats']:
        await bf.handle_admin_stats_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_users']:
        await bf.handle_admin_users_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_meals']:
        await bf.handle_admin_meals_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_broadcast']:
        await bf.handle_admin_broadcast_callback(update, context)
    elif query.data == "broadcast_create":
        await bf.handle_broadcast_create_callback(update, context)
    elif query.data == "broadcast_stats":
        await bf.handle_broadcast_stats_callback(update, context)
    elif query.data == "broadcast_confirm":
        await bf.handle_broadcast_confirm_callback(update, context)
    elif query.data == "broadcast_cancel":
        await bf.handle_broadcast_cancel_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_subscriptions']:
        await bf.handle_admin_subscriptions_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_check_subscription']:
        await bf.handle_admin_check_subscription_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_manage_subscription']:
        await bf.handle_admin_manage_subscription_callback(update, context)
    elif query.data.startswith(ADMIN_CALLBACKS['admin_activate_trial'] + ':'):
        await bf.handle_admin_activate_trial_callback(update, context)
    elif query.data.startswith(ADMIN_CALLBACKS['admin_activate_premium'] + ':'):
        await bf.handle_admin_activate_premium_callback(update, context)
    elif query.data.startswith(ADMIN_CALLBACKS['admin_deactivate_subscription'] + ':'):
        await bf.handle_admin_deactivate_subscription_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_back']:
        await bf.handle_admin_back_callback(update, context)
    elif query.data == ADMIN_CALLBACKS['admin_panel']:
        await bf.show_admin_panel(update, context)
    elif query.data == "buy_subscription":
        await bf.show_subscription_purchase_menu(update, context)
    elif query.data.startswith("buy_"):
        await bf.handle_subscription_purchase(update, context)
    elif query.data == "separator":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        await query.answer()
    elif query.data == "admin_star_balance":
        await bf.handle_admin_star_balance_callback(update, context)
    elif query.data == "cancel_analysis":
        await bf.handle_cancel_analysis(update, context)
    elif query.data == "confirm_analysis":
        await bf.handle_confirm_analysis(update, context)
    elif query.data == "add_to_analysis":
        await bf.handle_add_to_analysis(update, context)
    elif query.data == "confirm_check_analysis":
        await bf.handle_confirm_check_analysis(update, context)
    elif query.data == "add_to_check_analysis":
        await bf.handle_add_to_check_analysis(update, context)
    elif query.data == "confirm_photo_text_analysis":
        await bf.handle_confirm_photo_text_analysis(update, context)
    elif query.data == "add_to_photo_text_analysis":
        await bf.handle_add_to_photo_text_analysis(update, context)
    elif query.data == "confirm_photo_text_check_analysis":
        await bf.handle_confirm_photo_text_check_analysis(update, context)
    elif query.data == "add_to_photo_text_check_analysis":
        await bf.handle_add_to_photo_text_check_analysis(update, context)
    elif query.data == "confirm_text_analysis":
        await bf.handle_confirm_text_analysis(update, context)
    elif query.data == "add_to_text_analysis":
        await bf.handle_add_to_text_analysis(update, context)
    elif query.data == "confirm_check_text_analysis":
        await bf.handle_confirm_check_text_analysis(update, context)
    elif query.data == "add_to_check_text_analysis":
        await bf.handle_add_to_check_text_analysis(update, context)
    elif query.data == "cancel_text_analysis":
        await bf.handle_cancel_text_analysis(update, context)
    else:
        # –ï—Å–ª–∏ callback data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        logger.warning(f"Unknown callback data: {query.data}")
        await query.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('handle_callback_query')

async def handle_gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('gender_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_data' not in context.user_data:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register"
            )
            return
            
        gender_map = {
            'gender_male': '–ú—É–∂—Å–∫–æ–π',
            'gender_female': '–ñ–µ–Ω—Å–∫–∏–π'
        }
        
        user_data = context.user_data['user_data']
        user_data['gender'] = gender_map[query.data]
        context.user_data['registration_step'] = 'age'
        
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

__all__.append('handle_gender_callback')

async def handle_reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user_deleted = delete_user_by_telegram_id(user.id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
        meals_deleted = delete_all_user_meals(user.id)
        
        if user_deleted:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —É–¥–∞–ª–µ–Ω–∏—è
            message = "‚úÖ **–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!**\n\n"
            message += "‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã\n"
            if meals_deleted:
                message += "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —É–¥–∞–ª–µ–Ω—ã\n"
            else:
                message += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            message += "\n–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
            
            await query.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
            )
    except Exception as e:
        logger.error(f"Error in handle_reset_confirm: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('handle_reset_confirm')

async def handle_add_dish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not check_user_registration(user.id):
        await query.edit_message_text(
            "‚ùå **–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
            ]),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    access_info = check_subscription_access(user.id)
    if not access_info['has_access']:
        subscription_msg = get_subscription_message(access_info)
        await query.edit_message_text(
            subscription_msg,
            reply_markup=get_main_menu_keyboard_for_user(update),
            parse_mode='Markdown'
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    context.user_data.pop('photo_text_additional_used', None)
    context.user_data.pop('photo_text_check_additional_used', None)
    context.user_data.pop('text_additional_used', None)
    context.user_data.pop('check_text_additional_used', None)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = [
        [InlineKeyboardButton("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal_breakfast")],
        [InlineKeyboardButton("‚òÄÔ∏è –û–±–µ–¥", callback_data="meal_lunch")],
        [InlineKeyboardButton("üåô –£–∂–∏–Ω", callback_data="meal_dinner")],
        [InlineKeyboardButton("üçé –ü–µ—Ä–µ–∫—É—Å", callback_data="meal_snack")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üçΩÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ**\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:"
    
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('handle_add_dish')



async def handle_cancel_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data.pop('waiting_for_photo', None)
    context.user_data.pop('waiting_for_text', None)
    context.user_data.pop('waiting_for_voice', None)
    context.user_data.pop('waiting_for_photo_text', None)
    context.user_data.pop('waiting_for_photo_text_additional', None)
    context.user_data.pop('waiting_for_photo_text_check_additional', None)
    context.user_data.pop('waiting_for_check_photo', None)
    context.user_data.pop('waiting_for_check_text', None)
    context.user_data.pop('waiting_for_check_voice', None)
    context.user_data.pop('waiting_for_check_photo_text', None)
    context.user_data.pop('waiting_for_text_after_photo', None)
    context.user_data.pop('waiting_for_check_text_after_photo', None)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    context.user_data.pop('photo_analysis_result', None)
    context.user_data.pop('photo_dish_name', None)
    context.user_data.pop('photo_calories', None)
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    context.user_data.pop('analysis_supplemented', None)
    context.user_data.pop('check_analysis_supplemented', None)
    context.user_data.pop('waiting_for_additional_text', None)
    context.user_data.pop('waiting_for_check_additional_text', None)
    context.user_data.pop('waiting_for_photo_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('calories_display', None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard_for_user(update),
        parse_mode='Markdown'
    )

__all__.append('handle_cancel_analysis')

async def handle_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard_for_user(update),
        parse_mode='Markdown'
    )

__all__.append('handle_back_to_main')

async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    query = update.pre_checkout_query
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        if 'pending_payment' not in context.user_data:
            await query.answer(ok=False, error_message="–î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        payment_data = context.user_data['pending_payment']
        expected_price = payment_data['price']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
        if query.invoice_payload != f"subscription_{payment_data['subscription_type']}":
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error handling pre-checkout query: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

__all__.append('handle_pre_checkout_query')



async def handle_universal_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    user = update.effective_user
    message = update.message
    
    logger.info(f"Universal analysis from user {user.id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
    if not context.user_data.get('waiting_for_additional_text', False) and not context.user_data.get('waiting_for_check_additional_text', False):
        context.user_data.pop('photo_text_additional_used', None)
        context.user_data.pop('photo_text_check_additional_used', None)
        context.user_data.pop('text_additional_used', None)
        context.user_data.pop('check_text_additional_used', None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ Telegram ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    if context.user_data.get('admin_waiting_for_telegram_id', False):
        logger.info(f"Admin waiting for telegram ID, redirecting to handle_text_input for user {user.id}")
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ handle_text_input
        await bf.handle_text_input(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if context.user_data.get('waiting_for_broadcast_text', False):
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ handle_broadcast_text_input
        await bf.handle_broadcast_text_input(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'registration_step' in context.user_data:
        # –ï—Å–ª–∏ –∏–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ handle_text_input
        await bf.handle_text_input(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    waiting_for_additional = context.user_data.get('waiting_for_additional_text', False)
    waiting_for_check_additional = context.user_data.get('waiting_for_check_additional_text', False)
    
    if waiting_for_additional:
        logger.info(f"Handling additional text analysis for user {user.id}")
        await bf.handle_additional_text_analysis(update, context)
        return
    elif waiting_for_check_additional:
        logger.info(f"Handling check additional text analysis for user {user.id}")
        await bf.handle_check_additional_text_analysis(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = get_user_by_telegram_id(user.id)
    if not user_data:
        await message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    if not context.user_data.get('check_mode', False) and not is_admin(user.id):
        subscription = check_user_subscription(user.id)
        if not subscription['is_active']:
            await message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscription –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
                parse_mode='Markdown'
            )
            return
    else:
        # –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
        if not is_admin(user.id):
            subscription = check_user_subscription(user.id)
            if not subscription['is_active']:
                daily_checks = get_daily_calorie_checks_count(user.id)
                if daily_checks >= 3:
                    limit_msg = f"‚ùå **–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n"
                    limit_msg += f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é '–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏' {daily_checks}/3 —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                    limit_msg += f"‚è∞ **–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å**\n\n"
                    limit_msg += f"üí° **–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:**\n"
                    limit_msg += f"‚Ä¢ 1 –¥–µ–Ω—å - 50 ‚≠ê\n"
                    limit_msg += f"‚Ä¢ 7 –¥–Ω–µ–π - 200 ‚≠ê\n"
                    limit_msg += f"‚Ä¢ 30 –¥–Ω–µ–π - 500 ‚≠ê\n"
                    limit_msg += f"‚Ä¢ 90 –¥–Ω–µ–π - 1200 ‚≠ê\n"
                    limit_msg += f"‚Ä¢ 365 –¥–Ω–µ–π - 4000 ‚≠ê\n\n"
                    limit_msg += f"üíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π"
                
                    await message.reply_text(
                        limit_msg,
                        parse_mode='Markdown'
                    )
                    return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    if context.user_data.get('waiting_for_photo_text_additional'):
        await bf.handle_photo_text_additional_analysis(update, context)
        return
    elif context.user_data.get('waiting_for_photo_text_check_additional'):
        await bf.handle_photo_text_check_additional_analysis(update, context)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    if message.photo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Ñ–æ—Ç–æ
        if context.user_data.get('save_mode') or context.user_data.get('check_mode'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            if message.caption and message.caption.strip():
                # –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç - —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                logger.info(f"Photo with text analysis for user {user.id}: '{message.caption[:50]}...'")
                if context.user_data.get('save_mode'):
                    # –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    context.user_data['waiting_for_photo_text'] = True
                else:
                    # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
                    context.user_data['check_mode'] = True
                    context.user_data['waiting_for_check_photo_text'] = True
                await bf.handle_photo_with_text(update, context)
            else:
                # –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
                logger.info(f"Photo analysis for user {user.id}")
                if context.user_data.get('save_mode'):
                    # –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    context.user_data['waiting_for_photo'] = True
                else:
                    # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
                    context.user_data['check_mode'] = True
                    context.user_data['waiting_for_check_photo'] = True
                await bf.handle_photo(update, context)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await message.reply_text(
                "üì∑ **–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
                "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
                "üçΩÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ** - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "üîç **–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏** - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        
    elif message.voice:
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"Voice analysis for user {user.id}")
        if context.user_data.get('save_mode'):
            # –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            context.user_data['waiting_for_voice'] = True
        else:
            # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
            context.user_data['check_mode'] = True
            context.user_data['waiting_for_check_voice'] = True
        await bf.handle_voice(update, context)
        
    elif message.text and not message.text.startswith('/'):
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        logger.info(f"Text analysis for user {update.effective_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        if context.user_data.get('save_mode') or context.user_data.get('check_mode'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            if context.user_data.get('save_mode'):
                # –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                context.user_data['auto_save'] = True
            else:
                # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze
                context.user_data['check_mode'] = True
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            await bf.handle_food_text_analysis(update, context)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await message.reply_text(
                "üìù **–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
                "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
                "üçΩÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ** - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "üîç **–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏** - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        await message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ –µ–¥—ã\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            parse_mode='Markdown'
        )

__all__.append('handle_universal_analysis')

async def handle_check_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏' - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = check_user_registration(user.id)
        if not user_data:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        access_info = check_subscription_access(user.id)
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if not access_info['has_access']:
            daily_checks = get_daily_calorie_checks_count(user.id)
            if daily_checks >= 3:
                limit_msg = f"‚ùå **–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n"
                limit_msg += f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é '–£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏' {daily_checks}/3 —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                limit_msg += f"‚è∞ **–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å**\n\n"
                limit_msg += f"üí° **–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:**\n"
                limit_msg += f"‚Ä¢ 1 –¥–µ–Ω—å - 50 ‚≠ê\n"
                limit_msg += f"‚Ä¢ 7 –¥–Ω–µ–π - 200 ‚≠ê\n"
                limit_msg += f"‚Ä¢ 30 –¥–Ω–µ–π - 500 ‚≠ê\n"
                limit_msg += f"‚Ä¢ 90 –¥–Ω–µ–π - 1200 ‚≠ê\n"
                limit_msg += f"‚Ä¢ 365 –¥–Ω–µ–π - 4000 ‚≠ê\n\n"
                limit_msg += f"üíé –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π"
                
                await query.edit_message_text(
                    limit_msg,
                    reply_markup=get_main_menu_keyboard_for_user(update),
                    parse_mode='Markdown'
                )
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        context.user_data['check_mode'] = True
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        context.user_data.pop('photo_text_additional_used', None)
        context.user_data.pop('photo_text_check_additional_used', None)
        context.user_data.pop('text_additional_used', None)
        context.user_data.pop('check_text_additional_used', None)
        
        message_text = "üîç **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–¥—ã**\n\n"
        message_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ:\n"
        message_text += "‚Ä¢ üì∑ **–§–æ—Ç–æ** –±–ª—é–¥–∞\n"
        message_text += "‚Ä¢ üìù **–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** –±–ª—é–¥–∞\n"
        message_text += "‚Ä¢ üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        message_text += "**–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:**\n"
        message_text += "‚Ä¢ \"–ë–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞ –±–æ—Ä—â–∞ —Å –º—è—Å–æ–º –∏ —Å–º–µ—Ç–∞–Ω–æ–π\"\n"
        message_text += "‚Ä¢ \"2 –∫—É—Å–∫–∞ –ø–∏—Ü—Ü—ã –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\"\n"
        message_text += "‚Ä¢ \"–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å—ã—Ä–æ–º –ø–∞—Ä–º–µ–∑–∞–Ω\"\n\n"
        message_text += "‚ÑπÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        if not access_info['has_access']:
            daily_checks = get_daily_calorie_checks_count(user.id)
            message_text += f"\n\nüÜì **–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {3 - daily_checks}/3**"
            message_text += f"\n\n‚è∞ **–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å**"
        
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
            ]),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in handle_check_calories: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('handle_check_calories')

async def handle_food_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    user = update.effective_user
    description = update.message.text
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_text'] = False
    context.user_data['waiting_for_check_text'] = False
    context.user_data['waiting_for_text_after_photo'] = False
    context.user_data['waiting_for_check_text_after_photo'] = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text(
        "üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞...**\n\n"
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò –º–æ–¥–µ–ª–∏...",
        parse_mode='Markdown'
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        analysis_result = await analyze_food_text(description)
        
        if analysis_result and is_valid_analysis(analysis_result):
            # –£–¥–∞–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            analysis_result = remove_explanations_from_analysis(analysis_result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Analysis result for '{description}': {analysis_result}")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ë–ñ–£
            calories, protein, fat, carbs = extract_macros_from_analysis(analysis_result)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–ª–æ—Ä–∏–∏, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            if not calories:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                weight_grams = extract_weight_from_description(description)
                if weight_grams:
                    logger.info(f"Extracted weight from description: {weight_grams}–≥")
                    # –ò—â–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –≤ –∞–Ω–∞–ª–∏–∑–µ
                    calories_per_100g = extract_calories_per_100g_from_analysis(analysis_result)
                    if calories_per_100g:
                        calories = int((calories_per_100g * weight_grams) / 100)
                        logger.info(f"Calculated total calories: {calories} from {calories_per_100g} –∫–∫–∞–ª/100–≥ √ó {weight_grams}–≥")
            
            dish_name = extract_dish_name_from_analysis(analysis_result) or description[:50]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            if context.user_data.get('waiting_for_text_after_photo') or context.user_data.get('waiting_for_check_text_after_photo'):
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
                photo_analysis = context.user_data.get('photo_analysis_result', '')
                photo_dish_name = context.user_data.get('photo_dish_name', '–ë–ª—é–¥–æ')
                photo_calories = context.user_data.get('photo_calories', 0)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                combined_analysis = f"üì∑ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**\n{photo_analysis}\n\n"
                combined_analysis += f"üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è:**\n{description}\n\n"
                combined_analysis += f"üîç **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n{analysis_result}"
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('photo_analysis_result', None)
                context.user_data.pop('photo_dish_name', None)
                context.user_data.pop('photo_calories', None)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
                is_check_mode = context.user_data.get('waiting_for_check_text_after_photo', False)
                
                if is_check_mode:
                    # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π
                    add_calorie_check(user.id, 'photo_text')
                    
                    cleaned_result = clean_markdown_text(combined_analysis)
                    result_text = f"üîç **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{cleaned_result}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
                    
                    await processing_msg.edit_text(
                        result_text, 
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
                        ]), 
                        parse_mode='Markdown'
                    )
                else:
                    # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞
                    meal_name = context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                    meal_info = f"**üçΩÔ∏è {meal_name}**\n\n{combined_analysis}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    try:
                        meal_type = context.user_data.get('meal_name', 'meal_breakfast')
                        
                        success = add_meal(
                            telegram_id=user.id,
                            meal_type=meal_type,
                            meal_name=meal_info,
                            dish_name=dish_name,
                            calories=calories,
                            protein=protein,
                            fat=fat,
                            carbs=carbs,
                            analysis_type="text"
                        )
                        
                        if success:
                            await processing_msg.edit_text(
                                f"‚úÖ **–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {meal_name}!**\n\n"
                                f"üçΩÔ∏è **–ë–ª—é–¥–æ:** {dish_name}\n"
                                f"üî• **–ö–∞–ª–æ—Ä–∏–∏:** {calories} –∫–∫–∞–ª\n\n"
                                f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n{clean_markdown_text(combined_analysis)}",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏", callback_data="add_dish")]
                                ]),
                                parse_mode='Markdown'
                            )
                        else:
                            await processing_msg.edit_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏", callback_data="add_dish")]
                                ])
                            )
                    except Exception as e:
                        logger.error(f"Error saving meal: {e}")
                        await processing_msg.edit_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏", callback_data="add_dish")]
                            ])
                        )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–æ—Ä–∏–π
            is_check_mode = context.user_data.get('check_mode', False)
            is_auto_save = context.user_data.get('auto_save', False)
            
            if is_check_mode and not is_auto_save:
                # –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                context.user_data['original_analysis'] = analysis_result
                context.user_data['original_calories'] = calories
                context.user_data['original_dish_name'] = dish_name
                context.user_data['waiting_for_text_confirmation'] = True
                context.user_data['check_mode'] = True
                
                cleaned_result = clean_markdown_text(analysis_result)
                result_text = f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{cleaned_result}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
                
                await processing_msg.edit_text(
                    result_text, 
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_text_analysis")],
                        [InlineKeyboardButton("‚úèÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_to_check_text_analysis")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
                    ]), 
                    parse_mode='Markdown'
                )
            else:
                # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                context.user_data['original_analysis'] = analysis_result
                context.user_data['original_calories'] = calories
                context.user_data['original_dish_name'] = dish_name
                context.user_data['waiting_for_text_confirmation'] = True
                context.user_data['save_mode'] = True
                
                meal_name = context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                meal_info = f"**üçΩÔ∏è {meal_name}**\n\n{analysis_result}"
                cleaned_meal_info = clean_markdown_text(meal_info)
                
                await processing_msg.edit_text(
                    cleaned_meal_info, 
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_text_analysis")],
                        [InlineKeyboardButton("‚úèÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_to_text_analysis")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
                    ]), 
                    parse_mode='Markdown'
                )
                return
                
                # –°—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
                # try:
                #     meal_type = context.user_data.get('meal_name', 'meal_breakfast')
                #     meal_name = context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
                #     
                #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                #     success = add_meal(
                #         telegram_id=user.id,
                #         meal_type=meal_type,
                #         meal_name=meal_name,
                #         dish_name=dish_name,
                #         calories=calories,
                #         analysis_type="text"
                #     )
                #     
                #     if success:
                #         logger.info(f"Meal saved successfully for user {user.id}")
                #         cleaned_result = clean_markdown_text(analysis_result)
                #         await processing_msg.edit_text(cleaned_result, reply_markup=get_analysis_result_keyboard(), parse_mode='Markdown')
                #     else:
                #         logger.warning(f"Failed to save meal for user {user.id}")
                #         await processing_msg.edit_text(
                #             "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                #             "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                #             reply_markup=get_main_menu_keyboard_for_user(update)
                #         )
                #     
                # except Exception as e:
                #     logger.error(f"Error saving meal to database: {e}")
                #     await processing_msg.edit_text(
                #         "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                #         "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                #         reply_markup=get_main_menu_keyboard()
                #     )
        elif analysis_result:
            # –ò–ò –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏
            await processing_msg.edit_text(
                "‚ùå **–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
                "–ò–ò –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
                "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ–µ –∏–ª–∏ –Ω–µ—è—Å–Ω–æ–µ\n"
                "‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏\n"
                "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n\n"
                "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞', '2 –∫—É—Å–∫–∞')\n"
                "‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addphoto –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        else:
            # API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è
            await processing_msg.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '300–≥', '–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞')\n"
                "‚Ä¢ –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π:**\n"
                "‚Ä¢ \"–ë–æ—Ä—â —Å –º—è—Å–æ–º, 300–≥\"\n"
                "‚Ä¢ \"–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π, –±–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è\"\n"
                "‚Ä¢ \"–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, 2 –∫—É—Å–∫–∞\"\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addtext —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error processing text description: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addtext —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–∂–∏–º–æ–≤
        context.user_data.pop('auto_save', None)
        context.user_data.pop('save_mode', None)

__all__.append('handle_food_text_analysis')

async def handle_meal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    meal_types = {
        'meal_breakfast': 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫',
        'meal_lunch': '‚òÄÔ∏è –û–±–µ–¥', 
        'meal_dinner': 'üåô –£–∂–∏–Ω',
        'meal_snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
    }
    
    meal_name = meal_types.get(query.data, '–ü—Ä–∏–µ–º –ø–∏—â–∏')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['meal_name'] = query.data
    context.user_data['meal_name_name'] = meal_name
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    context.user_data['save_mode'] = True
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    context.user_data.pop('photo_text_additional_used', None)
    context.user_data.pop('photo_text_check_additional_used', None)
    context.user_data.pop('text_additional_used', None)
    context.user_data.pop('check_text_additional_used', None)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    await query.edit_message_text(
        f"üçΩÔ∏è **{meal_name}**\n\n"
        "ü§ñ **–ê–Ω–∞–ª–∏–∑ –µ–¥—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "‚Ä¢ üì∑ **–§–æ—Ç–æ –µ–¥—ã** - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ üìù **–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "‚Ä¢ \"–ë–æ—Ä—â —Å –º—è—Å–æ–º, 300–≥\"\n"
        "‚Ä¢ \"–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π\"\n"
        "‚Ä¢ \"–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, 2 –∫—É—Å–∫–∞\"",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

__all__.append('handle_meal_selection')

async def handle_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å' - –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /profile"""
    query = update.callback_query
    await query.answer()
    
    # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    logger.info(f"DEBUG handle_profile_callback called by user {user.id}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /profile
    from handlers.profile import profile_command
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏–∑ callback query
    class MockMessage:
        def __init__(self, callback_query):
            self.from_user = callback_query.from_user
            self.chat = callback_query.message.chat
            self.message_id = callback_query.message.message_id
            self.reply_text = callback_query.edit_message_text
            self.text = "/profile"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update
    class MockUpdate:
        def __init__(self, callback_query):
            self.effective_user = callback_query.from_user
            self.message = MockMessage(callback_query)
            self.callback_query = callback_query
    
    mock_update = MockUpdate(query)
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /profile
        await profile_command(mock_update, context)
    except Exception as e:
        logger.error(f"Error in handle_profile_callback: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('handle_profile_callback')

async def handle_stats_today_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    from handlers.profile import show_meal_statistics
    await show_meal_statistics(update, context)

__all__.append('handle_stats_today_callback')

async def handle_statistics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    access_info = check_subscription_access(user.id)
    if not access_info['has_access']:
        from handlers.subscription import get_subscription_message
        subscription_msg = get_subscription_message(access_info)
        await query.edit_message_text(
            subscription_msg,
            reply_markup=get_main_menu_keyboard_for_user(update),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today")],
        [InlineKeyboardButton("üìà –ó–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday")],
        [InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await query.edit_message_text(
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=stats_keyboard,
        parse_mode='Markdown'
    )

__all__.append('handle_statistics_callback')

async def handle_stats_yesterday_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—á–µ—Ä–∞
        from datetime import datetime, timedelta
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –∑–∞ –≤—á–µ—Ä–∞
        from database import get_daily_meals_by_type
        daily_meals = get_daily_meals_by_type(user.id, yesterday)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞:**\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        meal_order = [
            ('meal_breakfast', 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫'),
            ('meal_lunch', '‚òÄÔ∏è –û–±–µ–¥'),
            ('meal_dinner', 'üåô –£–∂–∏–Ω'),
            ('meal_snack', 'üçé –ü–µ—Ä–µ–∫—É—Å')
        ]
        
        total_calories = 0
        
        for meal_type, meal_name in meal_order:
            if meal_type in daily_meals:
                calories = daily_meals[meal_type]['calories']
                total_calories += calories
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                stats_text += f"{meal_name} - {calories} –∫–∫–∞–ª\n"
            else:
                stats_text += f"{meal_name} - 0 –∫–∫–∞–ª\n"
        
        stats_text += f"\nüî• **–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å:** {total_calories} –∫–∫–∞–ª"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∏ –æ—Ç —Ü–µ–ª–∏
        try:
            from database import get_user_target_macros
            target_macros = get_user_target_macros(user.id)
            target_calories = target_macros['calories']
            
            if target_calories > 0:
                daily_percentage = (total_calories / target_calories) * 100
                stats_text += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏:** {daily_percentage:.1f}%"
        except Exception as e:
            logger.error(f"Error calculating daily percentage: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing yesterday's statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
            ])
        )

__all__.append('handle_stats_yesterday_callback')

async def handle_stats_week_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é'"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        from datetime import datetime, timedelta
        from database import get_daily_macros, get_user_target_macros
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_macros = get_user_target_macros(user.id)
        target_calories = target_macros['calories']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        today = datetime.now().date()
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—ã–ª –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        days_since_monday = today.weekday()
        monday = today - timedelta(days=days_since_monday)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n"
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        total_week_calories = 0
        
        for i in range(7):  # 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            current_date = monday + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            daily_macros = get_daily_macros(user.id, date_str)
            calories = daily_macros['calories']
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±—É–¥—É—â–∏–π –¥–µ–Ω—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
            if current_date > today:
                calories = 0
                percentage = 0.0
                day_status = "üîÆ"
            else:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                if target_calories > 0:
                    percentage = (calories / target_calories) * 100
                else:
                    percentage = 0.0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
                if percentage == 0:
                    day_status = "‚ö™"
                elif percentage < 50:
                    day_status = "üî¥"
                elif percentage < 80:
                    day_status = "üü°"
                elif percentage <= 100:
                    day_status = "üü¢"
                else:
                    day_status = "üü†"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if current_date == today:
                day_name = f"**{weekdays[i]} (—Å–µ–≥–æ–¥–Ω—è)**"
            else:
                day_name = weekdays[i]
            
            stats_text += f"{day_status} {day_name}: {calories} –∫–∫–∞–ª ({percentage:.1f}%)\n"
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
            if current_date <= today:
                total_week_calories += calories
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        stats_text += f"\nüî• **–í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:** {total_week_calories} –∫–∫–∞–ª"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
        days_passed = min(days_since_monday + 1, 7)  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è
        if days_passed > 0 and target_calories > 0:
            avg_percentage = (total_week_calories / (days_passed * target_calories)) * 100
            stats_text += f"\nüìä **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:** {avg_percentage:.1f}%"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        stats_text += f"\nüéØ **–¶–µ–ª—å –≤ –¥–µ–Ω—å:** {target_calories} –∫–∫–∞–ª"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing week statistics: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="statistics")]
            ])
        )

__all__.append('handle_stats_week_callback')

async def handle_confirm_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ')
    
    if not original_analysis:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_photo_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('save_mode', None)
    context.user_data.pop('analysis_supplemented', None)
    context.user_data.pop('calories_display', None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        meal_name = context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
        meal_type = context.user_data.get('meal_name', 'meal_breakfast')
        
        logger.info(f"Confirming analysis for user {user.id}: meal_type={meal_type}, meal_name={meal_name}, dish_name={original_dish_name}, calories={original_calories}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        from services.food_analysis_service import extract_macros_from_analysis
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ë–ñ–£ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        if 'original_protein' in context.user_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ë–ñ–£ –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            protein = context.user_data.get('original_protein', 0)
            fat = context.user_data.get('original_fat', 0)
            carbs = context.user_data.get('original_carbs', 0)
            logger.info(f"Using supplemented macros: protein={protein}, fat={fat}, carbs={carbs}")
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ)
            calories_from_analysis, protein, fat, carbs = extract_macros_from_analysis(original_analysis)
            logger.info(f"Using original analysis macros: protein={protein}, fat={fat}, carbs={carbs}")
        
        success = add_meal(
            telegram_id=user.id,
            meal_type=meal_type,
            meal_name=meal_name,
            dish_name=original_dish_name,
            calories=original_calories,
            protein=protein,
            fat=fat,
            carbs=carbs,
            analysis_type="photo"
        )
        
        if success:
            logger.info(f"Meal saved successfully for user {user.id}")
            meal_info = f"**üçΩÔ∏è {meal_name}**\n\n{original_analysis}"
            cleaned_meal_info = clean_markdown_text(meal_info)
            
            await query.edit_message_text(
                f"‚úÖ **–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!**\n\n{cleaned_meal_info}",
                reply_markup=get_analysis_result_keyboard(),
                parse_mode='Markdown'
            )
        else:
            logger.warning(f"Failed to save meal for user {user.id}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )
            
    except Exception as e:
        logger.error(f"Error saving meal to database: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('handle_confirm_analysis')

async def handle_add_to_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('analysis_supplemented', False):
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_additional_text'] = True
    context.user_data['analysis_supplemented'] = True
    
    logger.info(f"Set waiting_for_additional_text=True for user {query.from_user.id}")
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (\"–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞\", \"2 –∫—É—Å–∫–∞\", \"–ø—Ä–∏–º–µ—Ä–Ω–æ 300–≥\")\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (\"—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—ã—Ä–∞\", \"–±–µ–∑ –º–∞—Å–ª–∞\")\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (\"–¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç\", \"–∂–∞—Ä–µ–Ω–æ–µ\")\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏–π:**\n"
        "‚Ä¢ \"–ë–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è, –¥–∏–∞–º–µ—Ç—Ä 30—Å–º, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–æ—Ü–∞—Ä–µ–ª–ª—ã\"\n"
        "‚Ä¢ \"2 –∫—É—Å–∫–∞, –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –±–µ–∑ –º–∞—Å–ª–∞\"\n"
        "‚Ä¢ \"–ü—Ä–∏–º–µ—Ä–Ω–æ 250–≥, —Å –¥–≤–æ–π–Ω–æ–π –ø–æ—Ä—Ü–∏–µ–π –º—è—Å–∞\"\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_analysis')

async def handle_confirm_check_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ')
    
    if not original_analysis:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_photo_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('check_mode', None)
    context.user_data.pop('check_analysis_supplemented', None)
    context.user_data.pop('calories_display', None)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    add_calorie_check(user.id, 'photo')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cleaned_result = clean_markdown_text(original_analysis)
    result_text = f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{cleaned_result}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
    
    await query.edit_message_text(
        result_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_confirm_check_analysis')

async def handle_confirm_check_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π (—Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é')
    
    if not original_analysis:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_text_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('check_mode', None)
    context.user_data.pop('check_analysis_supplemented', None)
    context.user_data.pop('calories_display', None)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    add_calorie_check(user.id, 'text')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cleaned_result = clean_markdown_text(original_analysis)
    result_text = f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{cleaned_result}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
    
    await query.edit_message_text(
        result_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_from_meal_selection")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_confirm_check_text_analysis')

async def handle_confirm_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ (—Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é')
    
    if not original_analysis:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_text_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('save_mode', None)
    context.user_data.pop('calories_display', None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        meal_name = context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')
        meal_type = context.user_data.get('meal_name', 'meal_breakfast')
        
        logger.info(f"Confirming text analysis for user {user.id}: meal_type={meal_type}, meal_name={meal_name}, dish_name={original_dish_name}, calories={original_calories}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        from services.food_analysis_service import extract_macros_from_analysis
        calories_from_analysis, protein, fat, carbs = extract_macros_from_analysis(original_analysis)
        
        success = add_meal(
            telegram_id=user.id,
            meal_type=meal_type,
            meal_name=meal_name,
            dish_name=original_dish_name,
            calories=original_calories,
            protein=protein,
            fat=fat,
            carbs=carbs,
            analysis_type="text"
        )
        
        if success:
            logger.info(f"Meal saved successfully for user {user.id}")
            meal_info = f"**üçΩÔ∏è {meal_name}**\n\n{original_analysis}"
            cleaned_meal_info = clean_markdown_text(meal_info)
            
            await query.edit_message_text(
                f"‚úÖ **–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!**\n\n{cleaned_meal_info}",
                reply_markup=get_analysis_result_keyboard(),
                parse_mode='Markdown'
            )
        else:
            logger.warning(f"Failed to save meal for user {user.id}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )
            
    except Exception as e:
        logger.error(f"Error saving meal to database: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )

__all__.append('handle_confirm_text_analysis')

async def handle_add_to_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ (—Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('text_analysis_supplemented', False):
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_text_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_additional_text'] = True
    context.user_data['text_analysis_supplemented'] = True
    
    logger.info(f"Set waiting_for_additional_text=True for user {query.from_user.id}")
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (\"–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞\", \"2 –∫—É—Å–∫–∞\", \"–ø—Ä–∏–º–µ—Ä–Ω–æ 300–≥\")\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (\"—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—ã—Ä–∞\", \"–±–µ–∑ –º–∞—Å–ª–∞\")\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (\"–¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç\", \"–∂–∞—Ä–µ–Ω–æ–µ\")\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏–π:**\n"
        "‚Ä¢ \"–ë–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è, –¥–∏–∞–º–µ—Ç—Ä 30—Å–º, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–æ—Ü–∞—Ä–µ–ª–ª—ã\"\n"
        "‚Ä¢ \"2 –∫—É—Å–∫–∞, –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –±–µ–∑ –º–∞—Å–ª–∞\"\n"
        "‚Ä¢ \"–ü—Ä–∏–º–µ—Ä–Ω–æ 250–≥, —Å –¥–≤–æ–π–Ω–æ–π –ø–æ—Ä—Ü–∏–µ–π –º—è—Å–∞\"\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_text_analysis')

async def handle_add_to_check_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π (—Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('check_text_analysis_supplemented', False):
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_text_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_check_additional_text'] = True
    context.user_data['check_text_analysis_supplemented'] = True
    
    logger.info(f"Set waiting_for_check_additional_text=True for user {query.from_user.id}")
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (\"–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞\", \"2 –∫—É—Å–∫–∞\", \"–ø—Ä–∏–º–µ—Ä–Ω–æ 300–≥\")\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (\"—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—ã—Ä–∞\", \"–±–µ–∑ –º–∞—Å–ª–∞\")\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (\"–¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç\", \"–∂–∞—Ä–µ–Ω–æ–µ\")\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏–π:**\n"
        "‚Ä¢ \"–ë–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è, –¥–∏–∞–º–µ—Ç—Ä 30—Å–º, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–æ—Ü–∞—Ä–µ–ª–ª—ã\"\n"
        "‚Ä¢ \"2 –∫—É—Å–∫–∞, –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –±–µ–∑ –º–∞—Å–ª–∞\"\n"
        "‚Ä¢ \"–ü—Ä–∏–º–µ—Ä–Ω–æ 250–≥, —Å –¥–≤–æ–π–Ω–æ–π –ø–æ—Ä—Ü–∏–µ–π –º—è—Å–∞\"\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_check_text_analysis')

async def handle_cancel_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_text_confirmation', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('save_mode', None)
    context.user_data.pop('check_mode', None)
    context.user_data.pop('text_analysis_supplemented', None)
    context.user_data.pop('check_text_analysis_supplemented', None)
    context.user_data.pop('calories_display', None)
    
    await query.edit_message_text(
        "‚ùå **–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞.",
        reply_markup=get_main_menu_keyboard_for_user(update),
        parse_mode='Markdown'
    )

__all__.append('handle_cancel_text_analysis')

async def handle_add_to_check_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('check_analysis_supplemented', False):
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_check_additional_text'] = True
    context.user_data['check_analysis_supplemented'] = True
    
    logger.info(f"Set waiting_for_check_additional_text=True for user {query.from_user.id}")
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (\"–±–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞\", \"2 –∫—É—Å–∫–∞\", \"–ø—Ä–∏–º–µ—Ä–Ω–æ 300–≥\")\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (\"—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—ã—Ä–∞\", \"–±–µ–∑ –º–∞—Å–ª–∞\")\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (\"–¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç\", \"–∂–∞—Ä–µ–Ω–æ–µ\")\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —É—Ç–æ—á–Ω–µ–Ω–∏–π:**\n"
        "‚Ä¢ \"–ë–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è, –¥–∏–∞–º–µ—Ç—Ä 30—Å–º, —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–æ—Ü–∞—Ä–µ–ª–ª—ã\"\n"
        "‚Ä¢ \"2 –∫—É—Å–∫–∞, –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –±–µ–∑ –º–∞—Å–ª–∞\"\n"
        "‚Ä¢ \"–ü—Ä–∏–º–µ—Ä–Ω–æ 250–≥, —Å –¥–≤–æ–π–Ω–æ–π –ø–æ—Ä—Ü–∏–µ–π –º—è—Å–∞\"\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_check_analysis')

async def handle_additional_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ (—Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)"""
    user = update.effective_user
    message = update.message
    additional_text = message.text.strip() if message.text else ""
    
    if not additional_text:
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ')
    
    logger.info(f"Original analysis length: {len(original_analysis) if original_analysis else 0}")
    logger.info(f"Additional text: '{additional_text}'")
    
    if not original_analysis or not original_analysis.strip():
        logger.error(f"Original analysis is empty or None: '{original_analysis}'")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply_text(
        "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...**\n\n"
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò –º–æ–¥–µ–ª–∏...",
        parse_mode='Markdown'
    )
    
    try:
        logger.info(f"Original analysis length: {len(original_analysis)}")
        logger.info(f"Additional text: '{additional_text}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–ü–†–û–ú–ü–¢ 2)
        additional_analysis = await analyze_food_supplement(original_analysis, additional_text)
        
        if additional_analysis and is_valid_analysis(additional_analysis):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            combined_analysis = f"**üìù –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{additional_text}\n\n**üîÑ –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:**\n{additional_analysis}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –∏–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            new_calories = extract_calories_from_analysis(additional_analysis)
            calories_from_macros, new_protein, new_fat, new_carbs = extract_macros_from_analysis(additional_analysis)
            
            if new_calories and new_calories > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
                final_calories = new_calories
                calories_display = f"{original_calories} ‚Üí {new_calories} –∫–∫–∞–ª"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
                final_calories = original_calories
                calories_display = f"{original_calories} –∫–∫–∞–ª"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['original_analysis'] = combined_analysis
            context.user_data['original_calories'] = final_calories
            context.user_data['calories_display'] = calories_display
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ñ–£ –∏–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['original_protein'] = new_protein
            context.user_data['original_fat'] = new_fat
            context.user_data['original_carbs'] = new_carbs
            
            logger.info(f"Saved supplemented macros: protein={new_protein}, fat={new_fat}, carbs={new_carbs}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('waiting_for_additional_text', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            cleaned_result = clean_markdown_text(combined_analysis)
            result_text = f"**üçΩÔ∏è {context.user_data.get('meal_name_name', '–ü—Ä–∏–µ–º –ø–∏—â–∏')}**\n\n{cleaned_result}\n\nüìä **–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:** {calories_display}"
            
            await processing_msg.edit_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await processing_msg.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error processing additional text: {e}")
        await processing_msg.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ]),
            parse_mode='Markdown'
        )

__all__.append('handle_additional_text_analysis')

async def handle_check_additional_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ (—Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏)"""
    user = update.effective_user
    message = update.message
    additional_text = message.text.strip() if message.text else ""
    
    if not additional_text:
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    original_analysis = context.user_data.get('original_analysis', '')
    original_calories = context.user_data.get('original_calories', 0)
    original_dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ')
    
    logger.info(f"Original analysis length: {len(original_analysis) if original_analysis else 0}")
    logger.info(f"Additional text: '{additional_text}'")
    
    if not original_analysis or not original_analysis.strip():
        logger.error(f"Original analysis is empty or None: '{original_analysis}'")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard_for_user(update)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply_text(
        "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...**\n\n"
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò –º–æ–¥–µ–ª–∏...",
        parse_mode='Markdown'
    )
    
    try:
        logger.info(f"Original analysis length: {len(original_analysis)}")
        logger.info(f"Additional text: '{additional_text}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–ü–†–û–ú–ü–¢ 2)
        additional_analysis = await analyze_food_supplement(original_analysis, additional_text)
        
        if additional_analysis and is_valid_analysis(additional_analysis):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            combined_analysis = f"**üìù –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{additional_text}\n\n**üîÑ –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:**\n{additional_analysis}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –∏–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            new_calories = extract_calories_from_analysis(additional_analysis)
            calories_from_macros, new_protein, new_fat, new_carbs = extract_macros_from_analysis(additional_analysis)
            
            if new_calories and new_calories > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
                final_calories = new_calories
                calories_display = f"{original_calories} ‚Üí {new_calories} –∫–∫–∞–ª"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
                final_calories = original_calories
                calories_display = f"{original_calories} –∫–∫–∞–ª"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['original_analysis'] = combined_analysis
            context.user_data['original_calories'] = final_calories
            context.user_data['calories_display'] = calories_display
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ñ–£ –∏–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['original_protein'] = new_protein
            context.user_data['original_fat'] = new_fat
            context.user_data['original_carbs'] = new_carbs
            
            logger.info(f"Saved supplemented macros (check mode): protein={new_protein}, fat={new_fat}, carbs={new_carbs}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('waiting_for_check_additional_text', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            cleaned_result = clean_markdown_text(combined_analysis)
            result_text = f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π**\n\n{cleaned_result}\n\nüìä **–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:** {calories_display}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
            
            await processing_msg.edit_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await processing_msg.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error processing additional text: {e}")
        await processing_msg.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_check_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ]),
            parse_mode='Markdown'
        )

__all__.append('handle_check_additional_text_analysis')

async def handle_confirm_photo_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        original_analysis = context.user_data.get('original_analysis')
        original_calories = context.user_data.get('original_calories')
        original_dish_name = context.user_data.get('original_dish_name')
        
        if not original_analysis:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è) –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        from services.food_analysis_service import extract_macros_from_analysis, clean_markdown_text, extract_dish_name_from_analysis
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ë–ñ–£ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        if 'original_protein' in context.user_data:
            calories = context.user_data.get('original_calories', 0)
            protein = context.user_data.get('original_protein', 0)
            fat = context.user_data.get('original_fat', 0)
            carbs = context.user_data.get('original_carbs', 0)
            dish_name = context.user_data.get('original_dish_name', '–ë–ª—é–¥–æ')
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            calories, protein, fat, carbs = extract_macros_from_analysis(original_analysis)
            dish_name = extract_dish_name_from_analysis(original_analysis) or original_dish_name
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏
        meal_type = context.user_data.get('meal_name', 'meal_breakfast')
        meal_name = context.user_data.get('meal_name_name', '–ó–∞–≤—Ç—Ä–∞–∫')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database import add_meal
        success = add_meal(
            telegram_id=user.id,
            meal_type=meal_type,
            meal_name=meal_name,
            dish_name=dish_name,
            calories=calories,
            protein=protein,
            fat=fat,
            carbs=carbs,
            analysis_type="photo_text"
        )
        
        if success:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('waiting_for_photo_text_confirmation', None)
            context.user_data.pop('waiting_for_photo_text', None)
            context.user_data.pop('waiting_for_photo_text_additional', None)
            context.user_data.pop('original_analysis', None)
            context.user_data.pop('original_calories', None)
            context.user_data.pop('original_dish_name', None)
            context.user_data.pop('original_protein', None)
            context.user_data.pop('original_fat', None)
            context.user_data.pop('original_carbs', None)
            context.user_data.pop('save_mode', None)
            
            cleaned_result = clean_markdown_text(original_analysis)
            result_text = f"‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\nüçΩÔ∏è {meal_name}\n\n{cleaned_result}"
            
            await query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error in handle_confirm_photo_text_analysis: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

__all__.append('handle_confirm_photo_text_analysis')

async def handle_add_to_photo_text_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('photo_text_additional_used', False):
        await query.edit_message_text(
            "‚ö†Ô∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ**\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_photo_text_additional'] = True
    context.user_data['photo_text_additional_used'] = True
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_photo_text_analysis')

async def handle_confirm_photo_text_check_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('waiting_for_photo_text_confirmation', None)
    context.user_data.pop('waiting_for_photo_text', None)
    context.user_data.pop('waiting_for_photo_text_additional', None)
    context.user_data.pop('waiting_for_photo_text_check_additional', None)
    context.user_data.pop('original_analysis', None)
    context.user_data.pop('original_calories', None)
    context.user_data.pop('original_dish_name', None)
    context.user_data.pop('original_protein', None)
    context.user_data.pop('original_fat', None)
    context.user_data.pop('original_carbs', None)
    context.user_data.pop('check_mode', None)
    
    await query.edit_message_text(
        "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

__all__.append('handle_confirm_photo_text_check_analysis')

async def handle_add_to_photo_text_check_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç—å' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–æ—Ä–∏–π (—Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç)"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if context.user_data.get('photo_text_check_additional_used', False):
        await query.edit_message_text(
            "‚ö†Ô∏è **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ**\n\n"
            "–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_check_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_photo_text_check_additional'] = True
    context.user_data['photo_text_check_additional_used'] = True
    
    await query.edit_message_text(
        "‚úèÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏\n\n"
        "‚ö†Ô∏è **–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!**",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
        ]),
        parse_mode='Markdown'
    )

__all__.append('handle_add_to_photo_text_check_analysis')

async def handle_photo_text_additional_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç (—Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)"""
    message = update.message
    user = update.effective_user
    
    try:
        additional_text = message.text.strip() if message.text else ""
        
        if not additional_text:
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–º–ø—Ç–∞ 1)
        photo_analysis = context.user_data.get('photo_analysis_for_supplement')
        if not photo_analysis:
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ü–†–û–ú–ü–¢ 2)
        refined_analysis = await analyze_food_supplement(photo_analysis, additional_text)
        
        if refined_analysis:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['original_analysis'] = refined_analysis
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            from services.food_analysis_service import extract_macros_from_analysis, clean_markdown_text, extract_dish_name_from_analysis
            
            calories, protein, fat, carbs = extract_macros_from_analysis(refined_analysis)
            dish_name = extract_dish_name_from_analysis(refined_analysis) or '–ë–ª—é–¥–æ'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['original_calories'] = calories
            context.user_data['original_dish_name'] = dish_name
            context.user_data['original_protein'] = protein
            context.user_data['original_fat'] = fat
            context.user_data['original_carbs'] = carbs
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cleaned_result = clean_markdown_text(refined_analysis)
            result_text = f"‚úèÔ∏è –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n{cleaned_result}"
            
            await message.reply_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ])
            )
        else:
            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error processing photo text additional analysis: {e}")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ])
        )

__all__.append('handle_photo_text_additional_analysis')

async def handle_photo_text_check_additional_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç (—Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏)"""
    message = update.message
    user = update.effective_user
    
    try:
        additional_text = message.text.strip() if message.text else ""
        
        if not additional_text:
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        original_analysis = context.user_data.get('original_analysis')
        if not original_analysis:
            await message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        from api_client import api_client
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        photo_analysis = original_analysis
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ü–†–û–ú–ü–¢ 2)
        refined_analysis = await analyze_food_supplement(photo_analysis, additional_text)
        
        if refined_analysis:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['original_analysis'] = refined_analysis
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            from services.food_analysis_service import extract_macros_from_analysis, clean_markdown_text, extract_dish_name_from_analysis
            
            calories, protein, fat, carbs = extract_macros_from_analysis(refined_analysis)
            dish_name = extract_dish_name_from_analysis(refined_analysis) or '–ë–ª—é–¥–æ'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['original_calories'] = calories
            context.user_data['original_dish_name'] = dish_name
            context.user_data['original_protein'] = protein
            context.user_data['original_fat'] = fat
            context.user_data['original_carbs'] = carbs
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cleaned_result = clean_markdown_text(refined_analysis)
            result_text = f"‚úèÔ∏è **–£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n{cleaned_result}\n\n‚ÑπÔ∏è **–î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**"
            
            await message.reply_text(
                result_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_check_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await message.reply_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_check_analysis")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
                ]),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error processing photo text check additional analysis: {e}")
        await message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –≤–µ—Ä–Ω–æ?' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?", callback_data="confirm_photo_text_check_analysis")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_analysis")]
            ]),
            parse_mode='Markdown'
        )

__all__.append('handle_photo_text_check_additional_analysis')

async def handle_send_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìç **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –≤ Telegram –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.",
        parse_mode='Markdown'
    )

async def handle_manual_timezone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é'"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—É—à–∞—Ä–∏—è
    from constants import TIMEZONE_HEMISPHERES
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—à–∞—Ä–∏—è
    keyboard.append([InlineKeyboardButton("üåç –ó–∞–ø–∞–¥–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ", callback_data="tz_hemisphere_western")])
    keyboard.append([InlineKeyboardButton("üåè –í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–ª—É—à–∞—Ä–∏–µ", callback_data="tz_hemisphere_eastern")])
    
    # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    keyboard.append([InlineKeyboardButton("üåç –î—Ä—É–≥–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞", callback_data="tz_other")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:**\n\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª—É—à–∞—Ä–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if context.user_data.get('registration_step') != 'location':
        await message.reply_text("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
        return
    
    if not message.location:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        return
    
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        timezone = get_timezone_from_coordinates(latitude, longitude)
        
        if timezone:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = context.user_data['user_data']
            user_data['timezone'] = timezone
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await complete_registration(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
            keyboard = [
                [InlineKeyboardButton("üåç –í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_timezone")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error processing location: {e}")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåç –í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_timezone")]
            ])
        )

def get_timezone_from_coordinates(latitude: float, longitude: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    try:
        import pytz
        from timezonefinder import TimezoneFinder
        
        tf = TimezoneFinder()
        timezone_name = tf.timezone_at(lat=latitude, lng=longitude)
        
        if timezone_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–ª–∏–¥–Ω—ã–π
            try:
                pytz.timezone(timezone_name)
                return timezone_name
            except pytz.exceptions.UnknownTimeZoneError:
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º UTC offset –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–≥–æ—Ç—ã
        utc_offset = int(longitude / 15)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º offset –æ—Ç -12 –¥–æ +14
        utc_offset = max(-12, min(14, utc_offset))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if utc_offset == 0:
            return "Europe/London"
        elif utc_offset > 0:
            return f"Etc/GMT-{utc_offset}"
        else:
            return f"Etc/GMT+{abs(utc_offset)}"
            
    except Exception as e:
        logger.error(f"Error determining timezone from coordinates: {e}")
        return None

async def complete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from handlers.registration import calculate_daily_calories, calculate_target_calories
    from handlers.menu import get_main_menu_keyboard
    from handlers.subscription import check_subscription_access, get_subscription_message
    from constants import GOALS
    
    user_data = context.user_data['user_data']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
    daily_calories = calculate_daily_calories(
        user_data['age'],
        user_data['height'],
        user_data['weight'],
        user_data['gender'],
        user_data['activity_level']
    )
    user_data['daily_calories'] = daily_calories
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏
    target_calories = calculate_target_calories(daily_calories, user_data['goal'])
    user_data['target_calories'] = target_calories
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ë–ñ–£
    from utils.macros_calculator import calculate_daily_macros
    
    target_macros = calculate_daily_macros(
        weight=user_data['weight'],
        activity_level=user_data['activity_level'],
        goal=user_data['goal'],
        target_calories=user_data['target_calories']
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ë–ñ–£
    from database import get_db_connection
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO users (
                    telegram_id, name, gender, age, height, weight, 
                    activity_level, goal, daily_calories, target_calories,
                    target_protein, target_fat, target_carbs
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_data['telegram_id'],
                user_data['name'],
                user_data['gender'],
                user_data['age'],
                user_data['height'],
                user_data['weight'],
                user_data['activity_level'],
                user_data['goal'],
                user_data['daily_calories'],
                user_data['target_calories'],
                target_macros['protein'],
                target_macros['fat'],
                target_macros['carbs']
            ))
            conn.commit()
        success = True
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        success = False
    
    if not success:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database import update_user_timezone
    update_user_timezone(user_data['telegram_id'], user_data['timezone'])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    context.user_data.pop('registration_step', None)
    context.user_data.pop('user_data', None)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = get_main_menu_keyboard_for_user(update)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    access_info = check_subscription_access(user_data['telegram_id'])
    subscription_msg = get_subscription_message(access_info)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª—è—Ö
    goal_text = GOALS[user_data['goal']]
    goal_emoji = "üìâ" if user_data['goal'] == 'lose_weight' else "‚öñÔ∏è" if user_data['goal'] == 'maintain' else "üìà"
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    from constants import TIMEZONES
    timezone_name = TIMEZONES.get(user_data['timezone'], user_data['timezone'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ë–ñ–£
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_data['name']}, ‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üéØ **–í–∞—à–∞ —Ü–µ–ª—å:** {goal_emoji} {goal_text}\n"
        f"üìä **–†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞:** {daily_calories} –∫–∫–∞–ª\n"
        f"üéØ **–¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞:** {target_calories} –∫–∫–∞–ª\n"
        f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {timezone_name}\n\n"
        f"ü•ó **–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ë–ñ–£:**\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {target_macros['protein']:.1f}–≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {target_macros['fat']:.1f}–≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {target_macros['carbs']:.1f}–≥\n\n"
        f"{subscription_msg}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # –î–ª—è callback query
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

__all__.append('handle_send_location_callback')
__all__.append('handle_manual_timezone_callback')
__all__.append('handle_location')
__all__.append('get_timezone_from_coordinates')
__all__.append('complete_registration')

