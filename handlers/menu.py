"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
import logging
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_connection, check_user_subscription
from logging_config import get_logger

logger = get_logger(__name__)


# ==================== KEYBOARD BUILDERS ====================

def get_main_menu_keyboard(user_id: Optional[int] = None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_dish")],
        [InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏", callback_data="check_calories")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if user_id:
        subscription = check_user_subscription(user_id)
        if not subscription['is_active'] or subscription['type'] == 'trial':
            keyboard.insert(3, [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")])
    else:
        # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        keyboard.insert(3, [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")])
    
    return InlineKeyboardMarkup(keyboard)


def get_main_menu_keyboard_for_user(update: Update):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    return get_main_menu_keyboard(user_id)


def get_analysis_result_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ú–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# ==================== MENU DISPLAY ====================

async def show_welcome_message_with_data(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"show_welcome_message_with_data called with user_data length: {len(user_data)}")
        logger.info(f"user_data[17] (timezone): {user_data[17] if len(user_data) > 17 else 'N/A'}")
        logger.info(f"user_data[18] (reminders_enabled): {user_data[18] if len(user_data) > 18 else 'N/A'}")
        logger.info(f"user_data[19] (created_at): {user_data[19] if len(user_data) > 19 else 'N/A'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = user_data[2]
        gender = user_data[3]
        age = user_data[4]
        height = user_data[5]
        weight = user_data[6]
        activity_level = user_data[7]
        goal = user_data[9]
        daily_calories = user_data[8]
        target_calories = user_data[10]
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ë–ñ–£: user_data[11] = target_protein, user_data[12] = target_fat, user_data[13] = target_carbs
        target_protein = user_data[11] if len(user_data) > 11 else 0.0
        target_fat = user_data[12] if len(user_data) > 12 else 0.0
        target_carbs = user_data[13] if len(user_data) > 13 else 0.0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç—Ä–æ–∫–∏
        try:
            target_protein = float(target_protein) if target_protein else 0.0
            target_fat = float(target_fat) if target_fat else 0.0
            target_carbs = float(target_carbs) if target_carbs else 0.0
        except (ValueError, TypeError):
            target_protein = 0.0
            target_fat = 0.0
            target_carbs = 0.0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å
        goal_emojis = {
            'lose_weight': 'üìâ –ü–æ—Ö—É–¥–µ—Ç—å',
            'maintain': '‚öñÔ∏è –î–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ',
            'gain_weight': 'üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å'
        }
        goal_text = goal_emojis.get(goal, goal)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = f"""–ü—Ä–∏–≤–µ—Ç {name}! ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üéØ –í–∞—à–∞ —Ü–µ–ª—å: {goal_text}
üìä –†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞: {daily_calories} –∫–∫–∞–ª
üéØ –¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞: {target_calories} –∫–∫–∞–ª

ü•ó –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ë–ñ–£:
‚Ä¢ –ë–µ–ª–∫–∏: {target_protein:.1f}–≥
‚Ä¢ –ñ–∏—Ä—ã: {target_fat:.1f}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {target_carbs:.1f}–≥

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                welcome_message,
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        else:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                welcome_message,
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing welcome message: {e}")
        # Fallback to main menu
        await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if hasattr(update, 'message') and update.message:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
            await update.message.reply_text(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ callback query
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        else:
            query = update.callback_query
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")


# ==================== COMMAND HANDLERS ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user.id,))
            user_data = cursor.fetchone()
        
        if user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            await show_welcome_message_with_data(update, context, user_data)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            welcome_message = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Calorigram - –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:
            """
            
            keyboard = [
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/terms - –£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
/dayreset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/reset - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîß –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
‚Ä¢ –†–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(help_text, reply_markup=get_main_menu_keyboard_for_user(update))
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text(help_text, reply_markup=get_main_menu_keyboard_for_user(update))


async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms - —É—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    terms_text = """
üìã **–£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ Calorigram Bot**

**üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–õ–ê–ù:**
‚Ä¢ –î–æ 5 –∞–Ω–∞–ª–∏–∑–æ–≤ –µ–¥—ã –≤ –¥–µ–Ω—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**‚≠ê –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê:**
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –µ–¥—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

**üíé –¶–ï–ù–´:**
‚Ä¢ 7 –¥–Ω–µ–π - 10 Telegram Stars

**üåü –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars:**
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π

**üìù –£–°–õ–û–í–ò–Ø:**
1. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
2. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
3. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @calorigram_support

**üîê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–¨:**
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –£–¥–∞–ª—è—é—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            terms_text,
            reply_markup=get_main_menu_keyboard_for_user(update),
            parse_mode='Markdown'
        )
    elif hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            terms_text,
            reply_markup=get_main_menu_keyboard_for_user(update),
            parse_mode='Markdown'
        )


# ==================== NAVIGATION HANDLERS ====================

async def handle_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    
    await show_main_menu(update, context)


async def handle_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    
    await show_main_menu(update, context)


async def handle_menu_from_meal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.pop('selected_meal', None)
    context.user_data.pop('selected_meal_name', None)
    context.user_data.pop('save_mode', None)
    context.user_data.pop('check_mode', None)
    
    await show_main_menu(update, context)


async def handle_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await help_command(update, context)


async def handle_terms_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await terms_command(update, context)

