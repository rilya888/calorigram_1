# Auto-generated module for payments handlers extracted from bot_functions.py
from ._shared import *
from database import is_payment_processed, mark_payment_processed  # imports, constants, helpers
import bot_functions as bf  # for cross-module handler calls
from handlers.menu import get_main_menu_keyboard_for_user

__all__ = []

async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription"""
    user = update.effective_user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = check_user_registration(user.id)
        if not user_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard_for_user(update)
                )
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard_for_user(update)
                )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        access_info = check_subscription_access(user.id)
        subscription_msg = get_subscription_message(access_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                subscription_msg,
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                subscription_msg,
                reply_markup=get_main_menu_keyboard_for_user(update),
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Error in subscription_command: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback –∑–∞–ø—Ä–æ—Å
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard_for_user(update)
            )

__all__.append('subscription_command')

async def handle_subscription_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    subscription_type = query.data.replace('buy_', '')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if subscription_type not in SUBSCRIPTION_PRICES:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        
        price = SUBSCRIPTION_PRICES[subscription_type]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await create_payment_invoice(user.id, subscription_type, price, query, context)
        
    except Exception as e:
        logger.error(f"Error handling subscription purchase: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

__all__.append('handle_subscription_purchase')

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    payment = update.message.successful_payment
    user = update.effective_user
    
    try:
        # Idempotency guard
        provider_charge_id = payment.provider_payment_charge_id if hasattr(payment, 'provider_payment_charge_id') else None
        if provider_charge_id and is_payment_processed(provider_charge_id):
            logger.info('Duplicate payment notification ignored')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        if 'pending_payment' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        payment_data = context.user_data['pending_payment']
        user_id = payment_data['user_id']
        days = payment_data['days']
        subscription_type = payment_data['subscription_type']
        stars_amount = payment.total_amount // 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ Stars
        
        if provider_charge_id:
            mark_payment_processed(provider_charge_id, user_id, stars_amount, payment.currency)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        activate_premium_subscription(user_id, days)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        del context.user_data['pending_payment']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞
        try:
            balance_stars = await get_bot_star_balance()
            if balance_stars is None:
                balance_stars = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"
        except Exception as e:
            logger.warning(f"Could not get star balance: {e}")
            balance_stars = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        success_message = f"üéâ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        success_message += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π\n"
        success_message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.now() + timedelta(days=days):%d.%m.%Y %H:%M}\n"
        success_message += f"üíé –û–ø–ª–∞—á–µ–Ω–æ: {stars_amount} ‚≠ê\n"
        success_message += f"üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {balance_stars} ‚≠ê\n\n"
        success_message += f"üíé –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!"
        
        await update.message.reply_text(
            success_message,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
            ]),
            parse_mode='Markdown'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        logger.info(f"Successful payment: user {user_id}, subscription {subscription_type}, {days} days, {stars_amount} Stars, bot balance: {balance_stars}")
        
    except Exception as e:
        logger.error(f"Error handling successful payment: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

__all__.append('handle_successful_payment')

