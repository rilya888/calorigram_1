"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
"""
import asyncio
import base64
import hashlib
import time
from logging_config import get_logger
from typing import Optional, Dict, Any
import aiohttp
from telegram import Update
from telegram.ext import ContextTypes
from config import API_KEYS, BASE_URL, API_TIMEOUT, MAX_API_RETRIES, MAX_IMAGE_SIZE
from performance_optimizations import rate_limiter

logger = get_logger(__name__)

class APIClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    def __init__(self):
        self.base_url = BASE_URL
        self.api_key = API_KEYS.get("nebius_api")
        self.timeout = aiohttp.ClientTimeout(total=API_TIMEOUT)
        self.session: Optional[aiohttp.ClientSession] = None
        self.cache: Dict[str, Tuple[str, float]] = {}  # –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.cache_ttl = 300  # TTL –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
        self.max_cache_size = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    
    async def __aenter__(self):
        """Async context manager entry"""
        try:
            import ssl
            import os
            
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ssl_context = ssl.create_default_context()
            
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –≤ —Ç–µ—Å—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å
            if os.getenv("TEST_MODE", "False").lower() == "true":
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE
            else:
                ssl_context.check_hostname = True
                ssl_context.verify_mode = ssl.CERT_REQUIRED
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2
            ssl_context.maximum_version = ssl.TLSVersion.TLSv1_3
            
            connector = aiohttp.TCPConnector(
                ssl=ssl_context, 
                limit=100, 
                limit_per_host=30,
                keepalive_timeout=30,
                enable_cleanup_closed=True
            )
            self.session = aiohttp.ClientSession(
                timeout=self.timeout, 
                connector=connector,
                headers={'User-Agent': 'CalorigramBot/1.0'}
            )
            logger.info("APIClient session created successfully")
            return self
        except Exception as e:
            logger.error(f"Failed to create APIClient session: {e}")
            raise
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        try:
            if self.session:
                await self.session.close()
                logger.info("APIClient session closed successfully")
        except Exception as e:
            logger.error(f"Error closing APIClient session: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            self.cache.clear()
    
    def _get_cache_key(self, data: bytes) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        return hashlib.md5(data).hexdigest()
    
    def _get_from_cache(self, cache_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        if cache_key in self.cache:
            result, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_ttl:
                logger.info(f"Cache hit for key: {cache_key[:8]}...")
                return result
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                del self.cache[cache_key]
        return None
    
    def _set_cache(self, cache_key: str, result: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if len(self.cache) >= self.max_cache_size:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_keys = sorted(self.cache.keys(), key=lambda k: self.cache[k][1])[:100]
            for key in oldest_keys:
                del self.cache[key]
        
        self.cache[cache_key] = (result, time.time())
        logger.info(f"Cache set for key: {cache_key[:8]}...")
    
    async def _make_request(self, method: str, url: str, **kwargs) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not self.session:
            raise RuntimeError("APIClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async with")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not rate_limiter.is_allowed():
            wait_time = rate_limiter.get_wait_time()
            logger.warning(f"Rate limit exceeded, waiting {wait_time:.1f}s")
            await asyncio.sleep(wait_time)
        
        for attempt in range(MAX_API_RETRIES):
            try:
                logger.info(f"Making request attempt {attempt + 1}/{MAX_API_RETRIES} to {url}")
                async with self.session.request(method, url, **kwargs) as response:
                    logger.info(f"Response status: {response.status}")
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"Response received successfully, size: {len(str(result))}")
                        return result
                    elif response.status == 429:  # Rate limit
                        wait_time = 2 ** attempt
                        logger.warning(f"Rate limit hit, waiting {wait_time}s")
                        await asyncio.sleep(wait_time)
                        continue
                    else:
                        error_text = await response.text()
                        logger.error(f"API request failed with status {response.status}: {error_text}")
                        return None
            except asyncio.TimeoutError:
                logger.warning(f"Request timeout (attempt {attempt + 1}/{MAX_API_RETRIES})")
                if attempt < MAX_API_RETRIES - 1:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except aiohttp.ClientError as e:
                logger.error(f"HTTP client error: {e}")
                if attempt < MAX_API_RETRIES - 1:
                    await asyncio.sleep(2 ** attempt)
                    continue
            except Exception as e:
                logger.error(f"Unexpected request error: {e}")
                if attempt < MAX_API_RETRIES - 1:
                    await asyncio.sleep(2 ** attempt)
                    continue
        
        return None
    
    async def analyze_image(self, image_data: bytes) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if not image_data:
                logger.error("Empty image data provided")
                return None
                
            if len(image_data) > MAX_IMAGE_SIZE:
                logger.error(f"Image too large: {len(image_data)} bytes (max: {MAX_IMAGE_SIZE})")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0)
            if len(image_data) < 100:
                logger.error("Image too small, might be corrupted")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._get_cache_key(image_data)
            cached_result = self._get_from_cache(cache_key)
            if cached_result:
                return cached_result
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "Qwen/Qwen2.5-VL-72B-Instruct",
                "messages": [
                    {
                        "role": "system",
                        "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –µ–¥—ã –∏ –ø–æ–¥—Å—á–µ—Ç—É –∫–∞–ª–æ—Ä–∏–π. 
                        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
                        
                        üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:

                        –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]
                        –í–µ—Å: [–æ–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞]–≥
                        –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: [–û–ë–©–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞] –∫–∫–∞–ª

                        üìä –ë–ñ–£ –Ω–∞ 100–≥:
                        ‚Ä¢ –ë–µ–ª–∫–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –ñ–∏—Ä—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥  
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥

                        üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:
                        ‚Ä¢ –ë–µ–ª–∫–∏: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –ñ–∏—Ä—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        
                        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ö–ê–õ–û–†–ò–ô–ù–û–°–¢–ò:
                        ‚Ä¢ –ú—è—Å–æ –∂–∞—Ä–µ–Ω–Ω–æ–µ: 250 –∫–∫–∞–ª/100–≥
                        ‚Ä¢ –Ø–±–ª–æ–∫–∏: 50 –∫–∫–∞–ª/100–≥  
                        ‚Ä¢ –•–∞–ª–≤–∞: 450 –∫–∫–∞–ª/100–≥
                        
                        –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):
                        1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                        2. –ó–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–π –û–ë–©–£–Æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: (–æ–±—â–∏–π_–≤–µ—Å_–≤_–≥—Ä–∞–º–º–∞—Ö √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥
                        3. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–∫—Ä—É–≥–ª—è–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
                        4. –û–î–ò–ù–ê–ö–û–í–´–ô –≤–µ—Å = –û–î–ò–ù–ê–ö–û–í–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å!
                        
                        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´:
                        ‚Ä¢ "—è–±–ª–æ–∫–æ 3 –∫–≥" = 3000–≥, 1500 –∫–∫–∞–ª (3000√∑100√ó50=1500)
                        ‚Ä¢ "—è–±–ª–æ–∫–∏ 3 –∫–≥" = 3000–≥, 1500 –∫–∫–∞–ª (3000√∑100√ó50=1500)
                        
                        –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê:
                        –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å = (–≤–µ—Å_–≤_–≥ √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥
                        
                        –í–ê–ñ–ù–û: –†–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –í–°–ï–ì–û –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è 100–≥!
                        –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
                        –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ (\\) –≤ —á–∏—Å–ª–∞—Ö!
                        
                        –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
                        ‚Ä¢ –ë–µ–ª–∫–∏: 0,3–≥ (–Ω–µ 03–≥)
                        ‚Ä¢ –ñ–∏—Ä—ã: 2,5–≥ (–Ω–µ 25–≥)
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 13,8–≥ (–Ω–µ 138–≥)
                        
                        –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–ø—è—Ç—É—é –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: 0,3–≥ –≤–º–µ—Å—Ç–æ 0.3–≥"""
                    },
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å."
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 500,
                "temperature": 0.3
            }
            
            logger.info(f"Making API request to {self.base_url}chat/completions")
            response = await self._make_request(
                "POST",
                f"{self.base_url}chat/completions",
                headers=headers,
                json=payload
            )
            
            logger.info(f"API response received: {response is not None}")
            if response:
                logger.info(f"Response keys: {list(response.keys()) if isinstance(response, dict) else 'Not a dict'}")
            
            if response and "choices" in response:
                result = response["choices"][0]["message"]["content"]
                logger.info(f"Analysis result length: {len(result) if result else 0}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._set_cache(cache_key, result)
                return result
            
            logger.error("No valid response from API")
            return None
            
        except aiohttp.ClientError as e:
            logger.error(f"HTTP client error analyzing image: {e}")
            return None
        except asyncio.TimeoutError as e:
            logger.error(f"Timeout error analyzing image: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error analyzing image: {e}")
            return None
    
    async def analyze_text(self, text: str) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã (–ü–†–û–ú–ü–¢ 3)"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "Qwen/Qwen2.5-VL-72B-Instruct",
                "messages": [
                    {
                        "role": "system",
                        "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –µ–¥—ã –∏ –ø–æ–¥—Å—á–µ—Ç—É –∫–∞–ª–æ—Ä–∏–π. 
                        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
                        
                        üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:

                        –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]
                        –í–µ—Å: [–æ–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞]–≥
                        –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: [–û–ë–©–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞] –∫–∫–∞–ª

                        üìä –ë–ñ–£ –Ω–∞ 100–≥:
                        ‚Ä¢ –ë–µ–ª–∫–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –ñ–∏—Ä—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥  
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥

                        üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:
                        ‚Ä¢ –ë–µ–ª–∫–∏: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –ñ–∏—Ä—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
                        
                        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ö–ê–õ–û–†–ò–ô–ù–û–°–¢–ò:
                        ‚Ä¢ –ú—è—Å–æ –∂–∞—Ä–µ–Ω–Ω–æ–µ: 250 –∫–∫–∞–ª/100–≥
                        ‚Ä¢ –Ø–±–ª–æ–∫–∏: 50 –∫–∫–∞–ª/100–≥  
                        ‚Ä¢ –•–∞–ª–≤–∞: 450 –∫–∫–∞–ª/100–≥
                        
                        –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):
                        1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                        2. –ó–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–π –û–ë–©–£–Æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: (–æ–±—â–∏–π_–≤–µ—Å_–≤_–≥—Ä–∞–º–º–∞—Ö √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥
                        3. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–∫—Ä—É–≥–ª—è–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
                        4. –û–î–ò–ù–ê–ö–û–í–´–ô –≤–µ—Å = –û–î–ò–ù–ê–ö–û–í–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å!
                        
                        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´:
                        ‚Ä¢ "–º—è—Å–æ 500–≥" = 500–≥, 1250 –∫–∫–∞–ª (500√∑100√ó250=1250)
                        ‚Ä¢ "–º—è—Å–æ –ø–æ–ª –∫–∏–ª–æ" = 500–≥, 1250 –∫–∫–∞–ª (500√∑100√ó250=1250)
                        ‚Ä¢ "–º—è—Å–æ –ø–æ–ª –∫–∏–ª–æ–≥—Ä–∞–º–∞" = 500–≥, 1250 –∫–∫–∞–ª (500√∑100√ó250=1250)
                        ‚Ä¢ "–º—è—Å–æ 1 –∫–≥" = 1000–≥, 2500 –∫–∫–∞–ª (1000√∑100√ó250=2500)
                        ‚Ä¢ "–º—è—Å–æ 2 –∫–≥" = 2000–≥, 5000 –∫–∫–∞–ª (2000√∑100√ó250=5000) 
                        ‚Ä¢ "–º—è—Å–æ 3 –∫–≥" = 3000–≥, 7500 –∫–∫–∞–ª (3000√∑100√ó250=7500)
                        
                        ‚Ä¢ "—è–±–ª–æ–∫–æ" = 150–≥, 75 –∫–∫–∞–ª (150√∑100√ó50=75)
                        ‚Ä¢ "—è–±–ª–æ–∫–æ 2 —à—Ç" = 300–≥, 150 –∫–∫–∞–ª (300√∑100√ó50=150)
                        ‚Ä¢ "—è–±–ª–æ–∫–æ 3 —à—Ç" = 450–≥, 225 –∫–∫–∞–ª (450√∑100√ó50=225)
                        
                        –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê:
                        –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å = (–≤–µ—Å_–≤_–≥ √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥
                        
                        –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
                        –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ (\\) –≤ —á–∏—Å–ª–∞—Ö!
                        
                        –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
                        ‚Ä¢ –ë–µ–ª–∫–∏: 0,3–≥ (–Ω–µ 03–≥)
                        ‚Ä¢ –ñ–∏—Ä—ã: 2,5–≥ (–Ω–µ 25–≥)
                        ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 13,8–≥ (–Ω–µ 138–≥)
                        
                        –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–ø—è—Ç—É—é –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: 0,3–≥ –≤–º–µ—Å—Ç–æ 0.3–≥"""
                    },
                    {
                        "role": "user",
                        "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {text}"
                    }
                ],
                "max_tokens": 500,
                "temperature": 0.3
            }
            
            response = await self._make_request(
                "POST",
                f"{self.base_url}chat/completions",
                headers=headers,
                json=payload
            )
            
            if response and "choices" in response:
                return response["choices"][0]["message"]["content"]
            
            return None
            
        except aiohttp.ClientError as e:
            logger.error(f"HTTP client error analyzing text: {e}")
            return None
        except asyncio.TimeoutError as e:
            logger.error(f"Timeout error analyzing text: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error analyzing text: {e}")
            return None
    
    async def analyze_photo_supplement(self, photo_analysis: str, user_text: str) -> Optional[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–†–û–ú–ü–¢ 2)"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            combined_prompt = f"""–ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:
{photo_analysis}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{user_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:

–ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]
–í–µ—Å: [–æ–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞]–≥
–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: [–û–ë–©–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞] –∫–∫–∞–ª

üìä –ë–ñ–£ –Ω–∞ 100–≥:
‚Ä¢ –ë–µ–ª–∫–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
‚Ä¢ –ñ–∏—Ä—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥  
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥

üìà –û–±—â–µ–µ –ë–ñ–£ –≤ –±–ª—é–¥–µ:
‚Ä¢ –ë–µ–ª–∫–∏: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
‚Ä¢ –ñ–∏—Ä—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]–≥

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ö–ê–õ–û–†–ò–ô–ù–û–°–¢–ò:
‚Ä¢ –ú—è—Å–æ –∂–∞—Ä–µ–Ω–Ω–æ–µ: 250 –∫–∫–∞–ª/100–≥
‚Ä¢ –Ø–±–ª–æ–∫–∏: 50 –∫–∫–∞–ª/100–≥  
‚Ä¢ –•–∞–ª–≤–∞: 450 –∫–∫–∞–ª/100–≥

–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):
1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
2. –ó–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–π –û–ë–©–£–Æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: (–æ–±—â–∏–π_–≤–µ—Å_–≤_–≥—Ä–∞–º–º–∞—Ö √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–∫—Ä—É–≥–ª—è–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
4. –û–î–ò–ù–ê–ö–û–í–´–ô –≤–µ—Å = –û–î–ò–ù–ê–ö–û–í–ê–Ø –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å!

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´:
‚Ä¢ "—è–±–ª–æ–∫–æ 3 –∫–≥" = 3000–≥, 1500 –∫–∫–∞–ª (3000√∑100√ó50=1500)
‚Ä¢ "—è–±–ª–æ–∫–∏ 3 –∫–≥" = 3000–≥, 1500 –∫–∫–∞–ª (3000√∑100√ó50=1500)

–ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê:
–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å = (–≤–µ—Å_–≤_–≥ √∑ 100) √ó –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥

–ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ (\\) –≤ —á–∏—Å–ª–∞—Ö!

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
‚Ä¢ –ë–µ–ª–∫–∏: 0,3–≥ (–Ω–µ 03–≥)
‚Ä¢ –ñ–∏—Ä—ã: 2,5–≥ (–Ω–µ 25–≥)
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 13,8–≥ (–Ω–µ 138–≥)

–ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–ø—è—Ç—É—é –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: 0,3–≥ –≤–º–µ—Å—Ç–æ 0.3–≥

–£—á—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è."""
            
            payload = {
                "model": "Qwen/Qwen2.5-VL-72B-Instruct",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –µ–¥—ã –∏ –ø–æ–¥—Å—á–µ—Ç—É –∫–∞–ª–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ –¥–æ–ø–æ–ª–Ω—è–π –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
                    },
                    {
                        "role": "user",
                        "content": combined_prompt
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.3
            }
            
            response = await self._make_request(
                "POST",
                f"{self.base_url}chat/completions",
                headers=headers,
                json=payload
            )
            
            if response and "choices" in response:
                return response["choices"][0]["message"]["content"]
            
            return None
            
        except aiohttp.ClientError as e:
            logger.error(f"HTTP client error analyzing photo supplement: {e}")
            return None
        except asyncio.TimeoutError as e:
            logger.error(f"Timeout error analyzing photo supplement: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error analyzing photo supplement: {e}")
            return None

    async def analyze_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        try:
            from voice_handler import voice_handler
            
            logger.info("Starting voice analysis with speech recognition")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VoiceHandler –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            recognized_text = await voice_handler.process_voice_message(update, context)
            
            if not recognized_text:
                logger.warning("Voice recognition failed - no text returned")
                return None
            
            logger.info(f"Voice recognition successful: '{recognized_text[:100]}...'")
            
            # –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
            return await self.analyze_text(recognized_text)
            
        except ImportError as e:
            logger.error(f"Import error in voice analysis: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error analyzing voice: {e}")
            return None
    
    async def analyze_photo_with_text(self, image_data: bytes, user_text: str) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–†–û–ú–ü–¢ 1 + –ü–†–û–ú–ü–¢ 2)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ (–ü–†–û–ú–ü–¢ 1)
            photo_analysis = await self.analyze_image(image_data)
            if not photo_analysis:
                logger.error("Failed to analyze photo")
                return None
            
            # –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–º (–ü–†–û–ú–ü–¢ 2)
            supplemented_analysis = await self.analyze_photo_supplement(photo_analysis, user_text)
            if not supplemented_analysis:
                logger.error("Failed to supplement photo analysis with text")
                return None
            
            logger.info(f"Photo+text analysis successful, result length: {len(supplemented_analysis)}")
            return supplemented_analysis
                        
        except Exception as e:
            logger.error(f"Unexpected error analyzing photo with text: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
api_client = APIClient()
