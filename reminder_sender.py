"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏
"""
import asyncio
from datetime import datetime
from typing import List, Tuple
import pytz
from logging_config import get_logger
from database import get_users_with_reminders_enabled, has_user_added_meal_today
from config import BOT_TOKEN

logger = get_logger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegram —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
try:
    from telegram import Bot
    from telegram.error import TelegramError
except ImportError:
    Bot = None
    TelegramError = Exception

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot_instance = None

def get_bot():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance is None and Bot:
        bot_instance = Bot(token=BOT_TOKEN)
    return bot_instance

async def send_meal_reminder(telegram_id: int, meal_type: str, meal_name: str, emoji: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot = get_bot()
        if not bot:
            logger.error("Bot instance not available")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è
        if has_user_added_meal_today(telegram_id, meal_type):
            logger.info(f"User {telegram_id} already added {meal_type} today, skipping reminder")
            return True
            
        message = f"""
{emoji} **–í—Ä–µ–º—è {meal_name.lower()}!**

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {meal_name.lower()} –≤ –±–æ—Ç.

üì± **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /start
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "{meal_name}"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç

üí° **–°–æ–≤–µ—Ç:** –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ!
        """
        
        await bot.send_message(
            chat_id=telegram_id,
            text=message,
            parse_mode='Markdown'
        )
        
        logger.info(f"Reminder sent to user {telegram_id} for {meal_type}")
        return True
        
    except TelegramError as e:
        if "chat not found" in str(e).lower() or "bot was blocked" in str(e).lower():
            logger.warning(f"User {telegram_id} blocked bot or chat not found: {e}")
        else:
            logger.error(f"Telegram error sending reminder to {telegram_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"Error sending reminder to {telegram_id}: {e}")
        return False

async def send_breakfast_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞–∫–µ –≤ 9:00"""
    await send_meal_reminders_for_type('meal_breakfast', '–ó–∞–≤—Ç—Ä–∞–∫', 'üåÖ')

async def send_lunch_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–µ–¥–µ –≤ 14:00"""
    await send_meal_reminders_for_type('meal_lunch', '–û–±–µ–¥', '‚òÄÔ∏è')

async def send_dinner_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —É–∂–∏–Ω–µ –≤ 19:00"""
    await send_meal_reminders_for_type('meal_dinner', '–£–∂–∏–Ω', 'üåô')

async def send_meal_reminders_for_type(meal_type: str, meal_name: str, emoji: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        logger.info(f"Starting {meal_name.lower()} reminders...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        users = get_users_with_reminders_enabled()
        
        if not users:
            logger.info("No users with reminders enabled")
            return
            
        logger.info(f"Found {len(users)} users with reminders enabled")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        tasks = []
        for user_data in users:
            telegram_id = user_data[0]
            timezone = user_data[2]  # timezone –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ 2 (0=telegram_id, 1=name, 2=timezone)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if is_reminder_time(timezone, meal_type):
                task = send_meal_reminder(telegram_id, meal_type, meal_name, emoji)
                tasks.append(task)
            else:
                logger.debug(f"Skipping user {telegram_id} - not reminder time in timezone {timezone}")
        
        if tasks:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            successful = sum(1 for result in results if result is True)
            failed = len(results) - successful
            
            logger.info(f"Breakfast reminders completed: {successful} successful, {failed} failed")
        else:
            logger.info(f"No users to send {meal_name.lower()} reminders to")
            
    except Exception as e:
        logger.error(f"Error sending {meal_name.lower()} reminders: {e}")

def is_reminder_time(timezone_str: str, meal_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_hours = {
            'meal_breakfast': 9,
            'meal_lunch': 14,
            'meal_dinner': 19
        }
        
        target_hour = reminder_hours.get(meal_type, 9)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tz = pytz.timezone(timezone_str)
        now = datetime.now(user_tz)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å –¥–æ–ø—É—Å–∫–æ–º –≤ 1 —á–∞—Å)
        current_hour = now.hour
        return current_hour == target_hour
        
    except Exception as e:
        logger.error(f"Error checking reminder time for timezone {timezone_str}: {e}")
        return False

async def send_test_reminder(telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot = get_bot()
        if not bot:
            return False
            
        message = """
üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç:**
‚Ä¢ üåÖ 9:00 - –ó–∞–≤—Ç—Ä–∞–∫
‚Ä¢ ‚òÄÔ∏è 14:00 - –û–±–µ–¥  
‚Ä¢ üåô 19:00 - –£–∂–∏–Ω

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.
        """
        
        await bot.send_message(
            chat_id=telegram_id,
            text=message,
            parse_mode='Markdown'
        )
        
        logger.info(f"Test reminder sent to user {telegram_id}")
        return True
        
    except Exception as e:
        logger.error(f"Error sending test reminder to {telegram_id}: {e}")
        return False
