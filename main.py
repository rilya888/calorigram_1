from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, PreCheckoutQueryHandler, filters
from telegram import BotCommand
from telegram.error import TelegramError

from config import BOT_TOKEN
from bot_functions import (
    start_command, help_command, register_command, profile_command, reset_command, 
    dayreset_command, resetcounters_command, admin_command, add_command, addmeal_command, addvoice_command, subscription_command, 
    terms_command, handle_universal_analysis,
    handle_callback_query, handle_photo, handle_voice, handle_location,
    handle_pre_checkout_query, handle_successful_payment
)
from handlers.misc import handle_stats_today_callback
from reminder_commands import reminder_settings_command, handle_reminder_callback
from error_handlers import error_handler
from logging_config import setup_logging, get_logger
from scheduler import setup_scheduler, start_scheduler, stop_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(
    log_level="INFO",
    log_file="logs/bot.log",
    max_file_size=10 * 1024 * 1024,  # 10MB
    backup_count=5,
    enable_console=True,
    enable_file=True
)
logger = get_logger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("Starting Calorigram bot...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .concurrent_updates(True)  # –í–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            .build()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞ (–±–µ–∑ /admin)
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("register", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            BotCommand("reset", "üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"),
            BotCommand("subscription", "‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞"),
            BotCommand("reminders", "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("addvoice", "üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞"),
            BotCommand("terms", "üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("register", register_command))
        application.add_handler(CommandHandler("profile", profile_command))
        application.add_handler(CommandHandler("reset", reset_command))
        application.add_handler(CommandHandler("subscription", subscription_command))
        application.add_handler(CommandHandler("terms", terms_command))
        application.add_handler(CommandHandler("reminders", reminder_settings_command))
        application.add_handler(CommandHandler("dayreset", dayreset_command))
        application.add_handler(CommandHandler("resetcounters", resetcounters_command))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("add", add_command))
        application.add_handler(CommandHandler("addmeal", addmeal_command))
        application.add_handler(CommandHandler("addvoice", addvoice_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏)
        application.add_handler(CallbackQueryHandler(handle_reminder_callback, pattern="^reminder_|^timezone_"))
        application.add_handler(CallbackQueryHandler(handle_stats_today_callback, pattern="^stats_today$"))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        application.add_handler(PreCheckoutQueryHandler(handle_pre_checkout_query))
        application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        application.add_handler(MessageHandler(filters.LOCATION, handle_location))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ (–∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        application.add_handler(MessageHandler(filters.PHOTO | filters.VOICE | (filters.TEXT & ~filters.COMMAND), handle_universal_analysis))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        if setup_scheduler():
            start_scheduler()
            logger.info("Scheduler started successfully")
        else:
            logger.warning("Failed to start scheduler")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        logger.info("Bot configuration completed")
        print("–ë–æ—Ç @Calorigram_Test_Bot –∑–∞–ø—É—â–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–º–∞–Ω–¥
        async def post_init(app):
            """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
            await app.bot.set_my_commands(commands)
            logger.info("Bot commands menu configured")
        
        application.post_init = post_init
        
        application.run_polling(
            allowed_updates=["message", "callback_query", "pre_checkout_query"],
            drop_pending_updates=True
        )
        
    except TelegramError as e:
        logger.error(f"Telegram API error: {e}")
        print(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        stop_scheduler()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
